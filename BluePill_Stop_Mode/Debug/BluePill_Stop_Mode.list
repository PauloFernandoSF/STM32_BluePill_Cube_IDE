
BluePill_Stop_Mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022c8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080023d4  080023d4  000123d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800240c  0800240c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800240c  0800240c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800240c  0800240c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800240c  0800240c  0001240c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002410  08002410  00012410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002414  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  2000000c  08002420  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08002420  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005075  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001503  00000000  00000000  000250aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005c8  00000000  00000000  000265b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000510  00000000  00000000  00026b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015db0  00000000  00000000  00027088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000677e  00000000  00000000  0003ce38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007bbdb  00000000  00000000  000435b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bf191  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001508  00000000  00000000  000bf1e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080023bc 	.word	0x080023bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080023bc 	.word	0x080023bc

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f9f6 	bl	8000540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f81c 	bl	8000190 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8dc 	bl	8000314 <MX_GPIO_Init>
  MX_RTC_Init();
 800015c:	f000 f876 	bl	800024c <MX_RTC_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000160:	2201      	movs	r2, #1
 8000162:	2104      	movs	r1, #4
 8000164:	4809      	ldr	r0, [pc, #36]	; (800018c <main+0x40>)
 8000166:	f000 fd07 	bl	8000b78 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800016a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800016e:	f000 fa49 	bl	8000604 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000172:	2200      	movs	r2, #0
 8000174:	2104      	movs	r1, #4
 8000176:	4805      	ldr	r0, [pc, #20]	; (800018c <main+0x40>)
 8000178:	f000 fcfe 	bl	8000b78 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN 2 */
  HAL_SuspendTick();
 800017c:	f000 fa66 	bl	800064c <HAL_SuspendTick>
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000180:	2101      	movs	r1, #1
 8000182:	2001      	movs	r0, #1
 8000184:	f000 fd46 	bl	8000c14 <HAL_PWR_EnterSTOPMode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000188:	e7fe      	b.n	8000188 <main+0x3c>
 800018a:	bf00      	nop
 800018c:	40010800 	.word	0x40010800

08000190 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b094      	sub	sp, #80	; 0x50
 8000194:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000196:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800019a:	2228      	movs	r2, #40	; 0x28
 800019c:	2100      	movs	r1, #0
 800019e:	4618      	mov	r0, r3
 80001a0:	f002 f904 	bl	80023ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a4:	f107 0314 	add.w	r3, r7, #20
 80001a8:	2200      	movs	r2, #0
 80001aa:	601a      	str	r2, [r3, #0]
 80001ac:	605a      	str	r2, [r3, #4]
 80001ae:	609a      	str	r2, [r3, #8]
 80001b0:	60da      	str	r2, [r3, #12]
 80001b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001b4:	1d3b      	adds	r3, r7, #4
 80001b6:	2200      	movs	r2, #0
 80001b8:	601a      	str	r2, [r3, #0]
 80001ba:	605a      	str	r2, [r3, #4]
 80001bc:	609a      	str	r2, [r3, #8]
 80001be:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80001c0:	2309      	movs	r3, #9
 80001c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001ca:	2300      	movs	r3, #0
 80001cc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ce:	2301      	movs	r3, #1
 80001d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80001d2:	2301      	movs	r3, #1
 80001d4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001d6:	2302      	movs	r3, #2
 80001d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001e0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001ea:	4618      	mov	r0, r3
 80001ec:	f000 fd44 	bl	8000c78 <HAL_RCC_OscConfig>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d001      	beq.n	80001fa <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80001f6:	f000 f8ed 	bl	80003d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001fa:	230f      	movs	r3, #15
 80001fc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001fe:	2302      	movs	r3, #2
 8000200:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000202:	2300      	movs	r3, #0
 8000204:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000206:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800020a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800020c:	2300      	movs	r3, #0
 800020e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000210:	f107 0314 	add.w	r3, r7, #20
 8000214:	2102      	movs	r1, #2
 8000216:	4618      	mov	r0, r3
 8000218:	f000 ffae 	bl	8001178 <HAL_RCC_ClockConfig>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d001      	beq.n	8000226 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000222:	f000 f8d7 	bl	80003d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000226:	2301      	movs	r3, #1
 8000228:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800022a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800022e:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000230:	1d3b      	adds	r3, r7, #4
 8000232:	4618      	mov	r0, r3
 8000234:	f001 f926 	bl	8001484 <HAL_RCCEx_PeriphCLKConfig>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d001      	beq.n	8000242 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800023e:	f000 f8c9 	bl	80003d4 <Error_Handler>
  }
}
 8000242:	bf00      	nop
 8000244:	3750      	adds	r7, #80	; 0x50
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
	...

0800024c <MX_RTC_Init>:
/**
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void){
 800024c:	b580      	push	{r7, lr}
 800024e:	b084      	sub	sp, #16
 8000250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000252:	f107 030c 	add.w	r3, r7, #12
 8000256:	2100      	movs	r1, #0
 8000258:	460a      	mov	r2, r1
 800025a:	801a      	strh	r2, [r3, #0]
 800025c:	460a      	mov	r2, r1
 800025e:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000260:	2300      	movs	r3, #0
 8000262:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 8000264:	463b      	mov	r3, r7
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800026c:	4b27      	ldr	r3, [pc, #156]	; (800030c <MX_RTC_Init+0xc0>)
 800026e:	4a28      	ldr	r2, [pc, #160]	; (8000310 <MX_RTC_Init+0xc4>)
 8000270:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000272:	4b26      	ldr	r3, [pc, #152]	; (800030c <MX_RTC_Init+0xc0>)
 8000274:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000278:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800027a:	4b24      	ldr	r3, [pc, #144]	; (800030c <MX_RTC_Init+0xc0>)
 800027c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000280:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000282:	4822      	ldr	r0, [pc, #136]	; (800030c <MX_RTC_Init+0xc0>)
 8000284:	f001 fa78 	bl	8001778 <HAL_RTC_Init>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800028e:	f000 f8a1 	bl	80003d4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours   = 23;
 8000292:	2317      	movs	r3, #23
 8000294:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 59;
 8000296:	233b      	movs	r3, #59	; 0x3b
 8000298:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 30;
 800029a:	231e      	movs	r3, #30
 800029c:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800029e:	f107 030c 	add.w	r3, r7, #12
 80002a2:	2201      	movs	r2, #1
 80002a4:	4619      	mov	r1, r3
 80002a6:	4819      	ldr	r0, [pc, #100]	; (800030c <MX_RTC_Init+0xc0>)
 80002a8:	f001 fafc 	bl	80018a4 <HAL_RTC_SetTime>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 80002b2:	f000 f88f 	bl	80003d4 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80002b6:	2301      	movs	r3, #1
 80002b8:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month   = RTC_MONTH_JANUARY;
 80002ba:	2301      	movs	r3, #1
 80002bc:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date    = 0x1;
 80002be:	2301      	movs	r3, #1
 80002c0:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year    = 0x0;
 80002c2:	2300      	movs	r3, #0
 80002c4:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80002c6:	f107 0308 	add.w	r3, r7, #8
 80002ca:	2201      	movs	r2, #1
 80002cc:	4619      	mov	r1, r3
 80002ce:	480f      	ldr	r0, [pc, #60]	; (800030c <MX_RTC_Init+0xc0>)
 80002d0:	f001 fc58 	bl	8001b84 <HAL_RTC_SetDate>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80002da:	f000 f87b 	bl	80003d4 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours   = 0x0;
 80002de:	2300      	movs	r3, #0
 80002e0:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80002e2:	2300      	movs	r3, #0
 80002e4:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 20;
 80002e6:	2314      	movs	r3, #20
 80002e8:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 80002ea:	2300      	movs	r3, #0
 80002ec:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80002ee:	463b      	mov	r3, r7
 80002f0:	2201      	movs	r2, #1
 80002f2:	4619      	mov	r1, r3
 80002f4:	4805      	ldr	r0, [pc, #20]	; (800030c <MX_RTC_Init+0xc0>)
 80002f6:	f001 fcfb 	bl	8001cf0 <HAL_RTC_SetAlarm>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8000300:	f000 f868 	bl	80003d4 <Error_Handler>
    sAlarm.AlarmTime.Minutes = time.Minutes;
    sAlarm.AlarmTime.Seconds = time.Seconds;
    HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);*/
  /* USER CODE END RTC_Init 2 */

}
 8000304:	bf00      	nop
 8000306:	3710      	adds	r7, #16
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	20000028 	.word	0x20000028
 8000310:	40002800 	.word	0x40002800

08000314 <MX_GPIO_Init>:
  */



static void MX_GPIO_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b088      	sub	sp, #32
 8000318:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800031a:	f107 0310 	add.w	r3, r7, #16
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	605a      	str	r2, [r3, #4]
 8000324:	609a      	str	r2, [r3, #8]
 8000326:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000328:	4b27      	ldr	r3, [pc, #156]	; (80003c8 <MX_GPIO_Init+0xb4>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	4a26      	ldr	r2, [pc, #152]	; (80003c8 <MX_GPIO_Init+0xb4>)
 800032e:	f043 0310 	orr.w	r3, r3, #16
 8000332:	6193      	str	r3, [r2, #24]
 8000334:	4b24      	ldr	r3, [pc, #144]	; (80003c8 <MX_GPIO_Init+0xb4>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	f003 0310 	and.w	r3, r3, #16
 800033c:	60fb      	str	r3, [r7, #12]
 800033e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000340:	4b21      	ldr	r3, [pc, #132]	; (80003c8 <MX_GPIO_Init+0xb4>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	4a20      	ldr	r2, [pc, #128]	; (80003c8 <MX_GPIO_Init+0xb4>)
 8000346:	f043 0320 	orr.w	r3, r3, #32
 800034a:	6193      	str	r3, [r2, #24]
 800034c:	4b1e      	ldr	r3, [pc, #120]	; (80003c8 <MX_GPIO_Init+0xb4>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	f003 0320 	and.w	r3, r3, #32
 8000354:	60bb      	str	r3, [r7, #8]
 8000356:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000358:	4b1b      	ldr	r3, [pc, #108]	; (80003c8 <MX_GPIO_Init+0xb4>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	4a1a      	ldr	r2, [pc, #104]	; (80003c8 <MX_GPIO_Init+0xb4>)
 800035e:	f043 0304 	orr.w	r3, r3, #4
 8000362:	6193      	str	r3, [r2, #24]
 8000364:	4b18      	ldr	r3, [pc, #96]	; (80003c8 <MX_GPIO_Init+0xb4>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	f003 0304 	and.w	r3, r3, #4
 800036c:	607b      	str	r3, [r7, #4]
 800036e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000370:	2200      	movs	r2, #0
 8000372:	2104      	movs	r1, #4
 8000374:	4815      	ldr	r0, [pc, #84]	; (80003cc <MX_GPIO_Init+0xb8>)
 8000376:	f000 fbff 	bl	8000b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800037a:	2302      	movs	r3, #2
 800037c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800037e:	4b14      	ldr	r3, [pc, #80]	; (80003d0 <MX_GPIO_Init+0xbc>)
 8000380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000382:	2301      	movs	r3, #1
 8000384:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000386:	f107 0310 	add.w	r3, r7, #16
 800038a:	4619      	mov	r1, r3
 800038c:	480f      	ldr	r0, [pc, #60]	; (80003cc <MX_GPIO_Init+0xb8>)
 800038e:	f000 fa79 	bl	8000884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000392:	2304      	movs	r3, #4
 8000394:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000396:	2301      	movs	r3, #1
 8000398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039a:	2300      	movs	r3, #0
 800039c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800039e:	2302      	movs	r3, #2
 80003a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003a2:	f107 0310 	add.w	r3, r7, #16
 80003a6:	4619      	mov	r1, r3
 80003a8:	4808      	ldr	r0, [pc, #32]	; (80003cc <MX_GPIO_Init+0xb8>)
 80003aa:	f000 fa6b 	bl	8000884 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80003ae:	2200      	movs	r2, #0
 80003b0:	2100      	movs	r1, #0
 80003b2:	2007      	movs	r0, #7
 80003b4:	f000 fa2f 	bl	8000816 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80003b8:	2007      	movs	r0, #7
 80003ba:	f000 fa48 	bl	800084e <HAL_NVIC_EnableIRQ>

}
 80003be:	bf00      	nop
 80003c0:	3720      	adds	r7, #32
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	40021000 	.word	0x40021000
 80003cc:	40010800 	.word	0x40010800
 80003d0:	10210000 	.word	0x10210000

080003d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003d8:	b672      	cpsid	i
}
 80003da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003dc:	e7fe      	b.n	80003dc <Error_Handler+0x8>
	...

080003e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b085      	sub	sp, #20
 80003e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003e6:	4b15      	ldr	r3, [pc, #84]	; (800043c <HAL_MspInit+0x5c>)
 80003e8:	699b      	ldr	r3, [r3, #24]
 80003ea:	4a14      	ldr	r2, [pc, #80]	; (800043c <HAL_MspInit+0x5c>)
 80003ec:	f043 0301 	orr.w	r3, r3, #1
 80003f0:	6193      	str	r3, [r2, #24]
 80003f2:	4b12      	ldr	r3, [pc, #72]	; (800043c <HAL_MspInit+0x5c>)
 80003f4:	699b      	ldr	r3, [r3, #24]
 80003f6:	f003 0301 	and.w	r3, r3, #1
 80003fa:	60bb      	str	r3, [r7, #8]
 80003fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003fe:	4b0f      	ldr	r3, [pc, #60]	; (800043c <HAL_MspInit+0x5c>)
 8000400:	69db      	ldr	r3, [r3, #28]
 8000402:	4a0e      	ldr	r2, [pc, #56]	; (800043c <HAL_MspInit+0x5c>)
 8000404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000408:	61d3      	str	r3, [r2, #28]
 800040a:	4b0c      	ldr	r3, [pc, #48]	; (800043c <HAL_MspInit+0x5c>)
 800040c:	69db      	ldr	r3, [r3, #28]
 800040e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000412:	607b      	str	r3, [r7, #4]
 8000414:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000416:	4b0a      	ldr	r3, [pc, #40]	; (8000440 <HAL_MspInit+0x60>)
 8000418:	685b      	ldr	r3, [r3, #4]
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000422:	60fb      	str	r3, [r7, #12]
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	4a04      	ldr	r2, [pc, #16]	; (8000440 <HAL_MspInit+0x60>)
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000432:	bf00      	nop
 8000434:	3714      	adds	r7, #20
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr
 800043c:	40021000 	.word	0x40021000
 8000440:	40010000 	.word	0x40010000

08000444 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b084      	sub	sp, #16
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a0b      	ldr	r2, [pc, #44]	; (8000480 <HAL_RTC_MspInit+0x3c>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d110      	bne.n	8000478 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000456:	f000 fbd1 	bl	8000bfc <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800045a:	4b0a      	ldr	r3, [pc, #40]	; (8000484 <HAL_RTC_MspInit+0x40>)
 800045c:	69db      	ldr	r3, [r3, #28]
 800045e:	4a09      	ldr	r2, [pc, #36]	; (8000484 <HAL_RTC_MspInit+0x40>)
 8000460:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000464:	61d3      	str	r3, [r2, #28]
 8000466:	4b07      	ldr	r3, [pc, #28]	; (8000484 <HAL_RTC_MspInit+0x40>)
 8000468:	69db      	ldr	r3, [r3, #28]
 800046a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000472:	4b05      	ldr	r3, [pc, #20]	; (8000488 <HAL_RTC_MspInit+0x44>)
 8000474:	2201      	movs	r2, #1
 8000476:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000478:	bf00      	nop
 800047a:	3710      	adds	r7, #16
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	40002800 	.word	0x40002800
 8000484:	40021000 	.word	0x40021000
 8000488:	4242043c 	.word	0x4242043c

0800048c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000490:	e7fe      	b.n	8000490 <NMI_Handler+0x4>

08000492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000492:	b480      	push	{r7}
 8000494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000496:	e7fe      	b.n	8000496 <HardFault_Handler+0x4>

08000498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800049c:	e7fe      	b.n	800049c <MemManage_Handler+0x4>

0800049e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800049e:	b480      	push	{r7}
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004a2:	e7fe      	b.n	80004a2 <BusFault_Handler+0x4>

080004a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004a8:	e7fe      	b.n	80004a8 <UsageFault_Handler+0x4>

080004aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004aa:	b480      	push	{r7}
 80004ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004ae:	bf00      	nop
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bc80      	pop	{r7}
 80004b4:	4770      	bx	lr

080004b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004b6:	b480      	push	{r7}
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004ba:	bf00      	nop
 80004bc:	46bd      	mov	sp, r7
 80004be:	bc80      	pop	{r7}
 80004c0:	4770      	bx	lr

080004c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004c2:	b480      	push	{r7}
 80004c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004c6:	bf00      	nop
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bc80      	pop	{r7}
 80004cc:	4770      	bx	lr

080004ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004ce:	b580      	push	{r7, lr}
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004d2:	f000 f87b 	bl	80005cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004d6:	bf00      	nop
 80004d8:	bd80      	pop	{r7, pc}

080004da <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80004da:	b580      	push	{r7, lr}
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80004de:	2002      	movs	r0, #2
 80004e0:	f000 fb62 	bl	8000ba8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80004e4:	bf00      	nop
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr

080004f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004f4:	480c      	ldr	r0, [pc, #48]	; (8000528 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80004f6:	490d      	ldr	r1, [pc, #52]	; (800052c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80004f8:	4a0d      	ldr	r2, [pc, #52]	; (8000530 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80004fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004fc:	e002      	b.n	8000504 <LoopCopyDataInit>

080004fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000502:	3304      	adds	r3, #4

08000504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000508:	d3f9      	bcc.n	80004fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800050a:	4a0a      	ldr	r2, [pc, #40]	; (8000534 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800050c:	4c0a      	ldr	r4, [pc, #40]	; (8000538 <LoopFillZerobss+0x22>)
  movs r3, #0
 800050e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000510:	e001      	b.n	8000516 <LoopFillZerobss>

08000512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000514:	3204      	adds	r2, #4

08000516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000518:	d3fb      	bcc.n	8000512 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800051a:	f7ff ffe5 	bl	80004e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800051e:	f001 ff21 	bl	8002364 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000522:	f7ff fe13 	bl	800014c <main>
  bx lr
 8000526:	4770      	bx	lr
  ldr r0, =_sdata
 8000528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800052c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000530:	08002414 	.word	0x08002414
  ldr r2, =_sbss
 8000534:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000538:	20000040 	.word	0x20000040

0800053c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800053c:	e7fe      	b.n	800053c <ADC1_2_IRQHandler>
	...

08000540 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000544:	4b08      	ldr	r3, [pc, #32]	; (8000568 <HAL_Init+0x28>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a07      	ldr	r2, [pc, #28]	; (8000568 <HAL_Init+0x28>)
 800054a:	f043 0310 	orr.w	r3, r3, #16
 800054e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000550:	2003      	movs	r0, #3
 8000552:	f000 f955 	bl	8000800 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000556:	200f      	movs	r0, #15
 8000558:	f000 f808 	bl	800056c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800055c:	f7ff ff40 	bl	80003e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000560:	2300      	movs	r3, #0
}
 8000562:	4618      	mov	r0, r3
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40022000 	.word	0x40022000

0800056c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000574:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <HAL_InitTick+0x54>)
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <HAL_InitTick+0x58>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	4619      	mov	r1, r3
 800057e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000582:	fbb3 f3f1 	udiv	r3, r3, r1
 8000586:	fbb2 f3f3 	udiv	r3, r2, r3
 800058a:	4618      	mov	r0, r3
 800058c:	f000 f96d 	bl	800086a <HAL_SYSTICK_Config>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000596:	2301      	movs	r3, #1
 8000598:	e00e      	b.n	80005b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2b0f      	cmp	r3, #15
 800059e:	d80a      	bhi.n	80005b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005a0:	2200      	movs	r2, #0
 80005a2:	6879      	ldr	r1, [r7, #4]
 80005a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005a8:	f000 f935 	bl	8000816 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005ac:	4a06      	ldr	r2, [pc, #24]	; (80005c8 <HAL_InitTick+0x5c>)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005b2:	2300      	movs	r3, #0
 80005b4:	e000      	b.n	80005b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005b6:	2301      	movs	r3, #1
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000000 	.word	0x20000000
 80005c4:	20000008 	.word	0x20000008
 80005c8:	20000004 	.word	0x20000004

080005cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005d0:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <HAL_IncTick+0x1c>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	461a      	mov	r2, r3
 80005d6:	4b05      	ldr	r3, [pc, #20]	; (80005ec <HAL_IncTick+0x20>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4413      	add	r3, r2
 80005dc:	4a03      	ldr	r2, [pc, #12]	; (80005ec <HAL_IncTick+0x20>)
 80005de:	6013      	str	r3, [r2, #0]
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr
 80005e8:	20000008 	.word	0x20000008
 80005ec:	2000003c 	.word	0x2000003c

080005f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  return uwTick;
 80005f4:	4b02      	ldr	r3, [pc, #8]	; (8000600 <HAL_GetTick+0x10>)
 80005f6:	681b      	ldr	r3, [r3, #0]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr
 8000600:	2000003c 	.word	0x2000003c

08000604 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800060c:	f7ff fff0 	bl	80005f0 <HAL_GetTick>
 8000610:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800061c:	d005      	beq.n	800062a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800061e:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <HAL_Delay+0x44>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	461a      	mov	r2, r3
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	4413      	add	r3, r2
 8000628:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800062a:	bf00      	nop
 800062c:	f7ff ffe0 	bl	80005f0 <HAL_GetTick>
 8000630:	4602      	mov	r2, r0
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	1ad3      	subs	r3, r2, r3
 8000636:	68fa      	ldr	r2, [r7, #12]
 8000638:	429a      	cmp	r2, r3
 800063a:	d8f7      	bhi.n	800062c <HAL_Delay+0x28>
  {
  }
}
 800063c:	bf00      	nop
 800063e:	bf00      	nop
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000008 	.word	0x20000008

0800064c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000650:	4b04      	ldr	r3, [pc, #16]	; (8000664 <HAL_SuspendTick+0x18>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a03      	ldr	r2, [pc, #12]	; (8000664 <HAL_SuspendTick+0x18>)
 8000656:	f023 0302 	bic.w	r3, r3, #2
 800065a:	6013      	str	r3, [r2, #0]
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr
 8000664:	e000e010 	.word	0xe000e010

08000668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f003 0307 	and.w	r3, r3, #7
 8000676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000678:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <__NVIC_SetPriorityGrouping+0x44>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800067e:	68ba      	ldr	r2, [r7, #8]
 8000680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000684:	4013      	ands	r3, r2
 8000686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800069a:	4a04      	ldr	r2, [pc, #16]	; (80006ac <__NVIC_SetPriorityGrouping+0x44>)
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	60d3      	str	r3, [r2, #12]
}
 80006a0:	bf00      	nop
 80006a2:	3714      	adds	r7, #20
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bc80      	pop	{r7}
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006b4:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <__NVIC_GetPriorityGrouping+0x18>)
 80006b6:	68db      	ldr	r3, [r3, #12]
 80006b8:	0a1b      	lsrs	r3, r3, #8
 80006ba:	f003 0307 	and.w	r3, r3, #7
}
 80006be:	4618      	mov	r0, r3
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bc80      	pop	{r7}
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	db0b      	blt.n	80006f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	f003 021f 	and.w	r2, r3, #31
 80006e4:	4906      	ldr	r1, [pc, #24]	; (8000700 <__NVIC_EnableIRQ+0x34>)
 80006e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ea:	095b      	lsrs	r3, r3, #5
 80006ec:	2001      	movs	r0, #1
 80006ee:	fa00 f202 	lsl.w	r2, r0, r2
 80006f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr
 8000700:	e000e100 	.word	0xe000e100

08000704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	6039      	str	r1, [r7, #0]
 800070e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000714:	2b00      	cmp	r3, #0
 8000716:	db0a      	blt.n	800072e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	b2da      	uxtb	r2, r3
 800071c:	490c      	ldr	r1, [pc, #48]	; (8000750 <__NVIC_SetPriority+0x4c>)
 800071e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000722:	0112      	lsls	r2, r2, #4
 8000724:	b2d2      	uxtb	r2, r2
 8000726:	440b      	add	r3, r1
 8000728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800072c:	e00a      	b.n	8000744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	b2da      	uxtb	r2, r3
 8000732:	4908      	ldr	r1, [pc, #32]	; (8000754 <__NVIC_SetPriority+0x50>)
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	f003 030f 	and.w	r3, r3, #15
 800073a:	3b04      	subs	r3, #4
 800073c:	0112      	lsls	r2, r2, #4
 800073e:	b2d2      	uxtb	r2, r2
 8000740:	440b      	add	r3, r1
 8000742:	761a      	strb	r2, [r3, #24]
}
 8000744:	bf00      	nop
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	e000e100 	.word	0xe000e100
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000758:	b480      	push	{r7}
 800075a:	b089      	sub	sp, #36	; 0x24
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	60b9      	str	r1, [r7, #8]
 8000762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	f003 0307 	and.w	r3, r3, #7
 800076a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800076c:	69fb      	ldr	r3, [r7, #28]
 800076e:	f1c3 0307 	rsb	r3, r3, #7
 8000772:	2b04      	cmp	r3, #4
 8000774:	bf28      	it	cs
 8000776:	2304      	movcs	r3, #4
 8000778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	3304      	adds	r3, #4
 800077e:	2b06      	cmp	r3, #6
 8000780:	d902      	bls.n	8000788 <NVIC_EncodePriority+0x30>
 8000782:	69fb      	ldr	r3, [r7, #28]
 8000784:	3b03      	subs	r3, #3
 8000786:	e000      	b.n	800078a <NVIC_EncodePriority+0x32>
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800078c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000790:	69bb      	ldr	r3, [r7, #24]
 8000792:	fa02 f303 	lsl.w	r3, r2, r3
 8000796:	43da      	mvns	r2, r3
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	401a      	ands	r2, r3
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	fa01 f303 	lsl.w	r3, r1, r3
 80007aa:	43d9      	mvns	r1, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b0:	4313      	orrs	r3, r2
         );
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3724      	adds	r7, #36	; 0x24
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr

080007bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	3b01      	subs	r3, #1
 80007c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007cc:	d301      	bcc.n	80007d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007ce:	2301      	movs	r3, #1
 80007d0:	e00f      	b.n	80007f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007d2:	4a0a      	ldr	r2, [pc, #40]	; (80007fc <SysTick_Config+0x40>)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	3b01      	subs	r3, #1
 80007d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007da:	210f      	movs	r1, #15
 80007dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007e0:	f7ff ff90 	bl	8000704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <SysTick_Config+0x40>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ea:	4b04      	ldr	r3, [pc, #16]	; (80007fc <SysTick_Config+0x40>)
 80007ec:	2207      	movs	r2, #7
 80007ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007f0:	2300      	movs	r3, #0
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	e000e010 	.word	0xe000e010

08000800 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f7ff ff2d 	bl	8000668 <__NVIC_SetPriorityGrouping>
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000816:	b580      	push	{r7, lr}
 8000818:	b086      	sub	sp, #24
 800081a:	af00      	add	r7, sp, #0
 800081c:	4603      	mov	r3, r0
 800081e:	60b9      	str	r1, [r7, #8]
 8000820:	607a      	str	r2, [r7, #4]
 8000822:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000828:	f7ff ff42 	bl	80006b0 <__NVIC_GetPriorityGrouping>
 800082c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	68b9      	ldr	r1, [r7, #8]
 8000832:	6978      	ldr	r0, [r7, #20]
 8000834:	f7ff ff90 	bl	8000758 <NVIC_EncodePriority>
 8000838:	4602      	mov	r2, r0
 800083a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800083e:	4611      	mov	r1, r2
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ff5f 	bl	8000704 <__NVIC_SetPriority>
}
 8000846:	bf00      	nop
 8000848:	3718      	adds	r7, #24
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b082      	sub	sp, #8
 8000852:	af00      	add	r7, sp, #0
 8000854:	4603      	mov	r3, r0
 8000856:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff ff35 	bl	80006cc <__NVIC_EnableIRQ>
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	b082      	sub	sp, #8
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000872:	6878      	ldr	r0, [r7, #4]
 8000874:	f7ff ffa2 	bl	80007bc <SysTick_Config>
 8000878:	4603      	mov	r3, r0
}
 800087a:	4618      	mov	r0, r3
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000884:	b480      	push	{r7}
 8000886:	b08b      	sub	sp, #44	; 0x2c
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000892:	2300      	movs	r3, #0
 8000894:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000896:	e148      	b.n	8000b2a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000898:	2201      	movs	r2, #1
 800089a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089c:	fa02 f303 	lsl.w	r3, r2, r3
 80008a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	69fa      	ldr	r2, [r7, #28]
 80008a8:	4013      	ands	r3, r2
 80008aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008ac:	69ba      	ldr	r2, [r7, #24]
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	f040 8137 	bne.w	8000b24 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	4aa3      	ldr	r2, [pc, #652]	; (8000b48 <HAL_GPIO_Init+0x2c4>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d05e      	beq.n	800097e <HAL_GPIO_Init+0xfa>
 80008c0:	4aa1      	ldr	r2, [pc, #644]	; (8000b48 <HAL_GPIO_Init+0x2c4>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d875      	bhi.n	80009b2 <HAL_GPIO_Init+0x12e>
 80008c6:	4aa1      	ldr	r2, [pc, #644]	; (8000b4c <HAL_GPIO_Init+0x2c8>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d058      	beq.n	800097e <HAL_GPIO_Init+0xfa>
 80008cc:	4a9f      	ldr	r2, [pc, #636]	; (8000b4c <HAL_GPIO_Init+0x2c8>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d86f      	bhi.n	80009b2 <HAL_GPIO_Init+0x12e>
 80008d2:	4a9f      	ldr	r2, [pc, #636]	; (8000b50 <HAL_GPIO_Init+0x2cc>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d052      	beq.n	800097e <HAL_GPIO_Init+0xfa>
 80008d8:	4a9d      	ldr	r2, [pc, #628]	; (8000b50 <HAL_GPIO_Init+0x2cc>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d869      	bhi.n	80009b2 <HAL_GPIO_Init+0x12e>
 80008de:	4a9d      	ldr	r2, [pc, #628]	; (8000b54 <HAL_GPIO_Init+0x2d0>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d04c      	beq.n	800097e <HAL_GPIO_Init+0xfa>
 80008e4:	4a9b      	ldr	r2, [pc, #620]	; (8000b54 <HAL_GPIO_Init+0x2d0>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d863      	bhi.n	80009b2 <HAL_GPIO_Init+0x12e>
 80008ea:	4a9b      	ldr	r2, [pc, #620]	; (8000b58 <HAL_GPIO_Init+0x2d4>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d046      	beq.n	800097e <HAL_GPIO_Init+0xfa>
 80008f0:	4a99      	ldr	r2, [pc, #612]	; (8000b58 <HAL_GPIO_Init+0x2d4>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d85d      	bhi.n	80009b2 <HAL_GPIO_Init+0x12e>
 80008f6:	2b12      	cmp	r3, #18
 80008f8:	d82a      	bhi.n	8000950 <HAL_GPIO_Init+0xcc>
 80008fa:	2b12      	cmp	r3, #18
 80008fc:	d859      	bhi.n	80009b2 <HAL_GPIO_Init+0x12e>
 80008fe:	a201      	add	r2, pc, #4	; (adr r2, 8000904 <HAL_GPIO_Init+0x80>)
 8000900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000904:	0800097f 	.word	0x0800097f
 8000908:	08000959 	.word	0x08000959
 800090c:	0800096b 	.word	0x0800096b
 8000910:	080009ad 	.word	0x080009ad
 8000914:	080009b3 	.word	0x080009b3
 8000918:	080009b3 	.word	0x080009b3
 800091c:	080009b3 	.word	0x080009b3
 8000920:	080009b3 	.word	0x080009b3
 8000924:	080009b3 	.word	0x080009b3
 8000928:	080009b3 	.word	0x080009b3
 800092c:	080009b3 	.word	0x080009b3
 8000930:	080009b3 	.word	0x080009b3
 8000934:	080009b3 	.word	0x080009b3
 8000938:	080009b3 	.word	0x080009b3
 800093c:	080009b3 	.word	0x080009b3
 8000940:	080009b3 	.word	0x080009b3
 8000944:	080009b3 	.word	0x080009b3
 8000948:	08000961 	.word	0x08000961
 800094c:	08000975 	.word	0x08000975
 8000950:	4a82      	ldr	r2, [pc, #520]	; (8000b5c <HAL_GPIO_Init+0x2d8>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d013      	beq.n	800097e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000956:	e02c      	b.n	80009b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	623b      	str	r3, [r7, #32]
          break;
 800095e:	e029      	b.n	80009b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	3304      	adds	r3, #4
 8000966:	623b      	str	r3, [r7, #32]
          break;
 8000968:	e024      	b.n	80009b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	68db      	ldr	r3, [r3, #12]
 800096e:	3308      	adds	r3, #8
 8000970:	623b      	str	r3, [r7, #32]
          break;
 8000972:	e01f      	b.n	80009b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	330c      	adds	r3, #12
 800097a:	623b      	str	r3, [r7, #32]
          break;
 800097c:	e01a      	b.n	80009b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	689b      	ldr	r3, [r3, #8]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d102      	bne.n	800098c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000986:	2304      	movs	r3, #4
 8000988:	623b      	str	r3, [r7, #32]
          break;
 800098a:	e013      	b.n	80009b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	689b      	ldr	r3, [r3, #8]
 8000990:	2b01      	cmp	r3, #1
 8000992:	d105      	bne.n	80009a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000994:	2308      	movs	r3, #8
 8000996:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	69fa      	ldr	r2, [r7, #28]
 800099c:	611a      	str	r2, [r3, #16]
          break;
 800099e:	e009      	b.n	80009b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009a0:	2308      	movs	r3, #8
 80009a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	69fa      	ldr	r2, [r7, #28]
 80009a8:	615a      	str	r2, [r3, #20]
          break;
 80009aa:	e003      	b.n	80009b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009ac:	2300      	movs	r3, #0
 80009ae:	623b      	str	r3, [r7, #32]
          break;
 80009b0:	e000      	b.n	80009b4 <HAL_GPIO_Init+0x130>
          break;
 80009b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	2bff      	cmp	r3, #255	; 0xff
 80009b8:	d801      	bhi.n	80009be <HAL_GPIO_Init+0x13a>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	e001      	b.n	80009c2 <HAL_GPIO_Init+0x13e>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	3304      	adds	r3, #4
 80009c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	2bff      	cmp	r3, #255	; 0xff
 80009c8:	d802      	bhi.n	80009d0 <HAL_GPIO_Init+0x14c>
 80009ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	e002      	b.n	80009d6 <HAL_GPIO_Init+0x152>
 80009d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d2:	3b08      	subs	r3, #8
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	210f      	movs	r1, #15
 80009de:	693b      	ldr	r3, [r7, #16]
 80009e0:	fa01 f303 	lsl.w	r3, r1, r3
 80009e4:	43db      	mvns	r3, r3
 80009e6:	401a      	ands	r2, r3
 80009e8:	6a39      	ldr	r1, [r7, #32]
 80009ea:	693b      	ldr	r3, [r7, #16]
 80009ec:	fa01 f303 	lsl.w	r3, r1, r3
 80009f0:	431a      	orrs	r2, r3
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	f000 8090 	beq.w	8000b24 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a04:	4b56      	ldr	r3, [pc, #344]	; (8000b60 <HAL_GPIO_Init+0x2dc>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	4a55      	ldr	r2, [pc, #340]	; (8000b60 <HAL_GPIO_Init+0x2dc>)
 8000a0a:	f043 0301 	orr.w	r3, r3, #1
 8000a0e:	6193      	str	r3, [r2, #24]
 8000a10:	4b53      	ldr	r3, [pc, #332]	; (8000b60 <HAL_GPIO_Init+0x2dc>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	f003 0301 	and.w	r3, r3, #1
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a1c:	4a51      	ldr	r2, [pc, #324]	; (8000b64 <HAL_GPIO_Init+0x2e0>)
 8000a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a20:	089b      	lsrs	r3, r3, #2
 8000a22:	3302      	adds	r3, #2
 8000a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2c:	f003 0303 	and.w	r3, r3, #3
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	220f      	movs	r2, #15
 8000a34:	fa02 f303 	lsl.w	r3, r2, r3
 8000a38:	43db      	mvns	r3, r3
 8000a3a:	68fa      	ldr	r2, [r7, #12]
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a49      	ldr	r2, [pc, #292]	; (8000b68 <HAL_GPIO_Init+0x2e4>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d00d      	beq.n	8000a64 <HAL_GPIO_Init+0x1e0>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a48      	ldr	r2, [pc, #288]	; (8000b6c <HAL_GPIO_Init+0x2e8>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d007      	beq.n	8000a60 <HAL_GPIO_Init+0x1dc>
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a47      	ldr	r2, [pc, #284]	; (8000b70 <HAL_GPIO_Init+0x2ec>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d101      	bne.n	8000a5c <HAL_GPIO_Init+0x1d8>
 8000a58:	2302      	movs	r3, #2
 8000a5a:	e004      	b.n	8000a66 <HAL_GPIO_Init+0x1e2>
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	e002      	b.n	8000a66 <HAL_GPIO_Init+0x1e2>
 8000a60:	2301      	movs	r3, #1
 8000a62:	e000      	b.n	8000a66 <HAL_GPIO_Init+0x1e2>
 8000a64:	2300      	movs	r3, #0
 8000a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a68:	f002 0203 	and.w	r2, r2, #3
 8000a6c:	0092      	lsls	r2, r2, #2
 8000a6e:	4093      	lsls	r3, r2
 8000a70:	68fa      	ldr	r2, [r7, #12]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a76:	493b      	ldr	r1, [pc, #236]	; (8000b64 <HAL_GPIO_Init+0x2e0>)
 8000a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a7a:	089b      	lsrs	r3, r3, #2
 8000a7c:	3302      	adds	r3, #2
 8000a7e:	68fa      	ldr	r2, [r7, #12]
 8000a80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d006      	beq.n	8000a9e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a90:	4b38      	ldr	r3, [pc, #224]	; (8000b74 <HAL_GPIO_Init+0x2f0>)
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	4937      	ldr	r1, [pc, #220]	; (8000b74 <HAL_GPIO_Init+0x2f0>)
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	600b      	str	r3, [r1, #0]
 8000a9c:	e006      	b.n	8000aac <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a9e:	4b35      	ldr	r3, [pc, #212]	; (8000b74 <HAL_GPIO_Init+0x2f0>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	4933      	ldr	r1, [pc, #204]	; (8000b74 <HAL_GPIO_Init+0x2f0>)
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d006      	beq.n	8000ac6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ab8:	4b2e      	ldr	r3, [pc, #184]	; (8000b74 <HAL_GPIO_Init+0x2f0>)
 8000aba:	685a      	ldr	r2, [r3, #4]
 8000abc:	492d      	ldr	r1, [pc, #180]	; (8000b74 <HAL_GPIO_Init+0x2f0>)
 8000abe:	69bb      	ldr	r3, [r7, #24]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	604b      	str	r3, [r1, #4]
 8000ac4:	e006      	b.n	8000ad4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ac6:	4b2b      	ldr	r3, [pc, #172]	; (8000b74 <HAL_GPIO_Init+0x2f0>)
 8000ac8:	685a      	ldr	r2, [r3, #4]
 8000aca:	69bb      	ldr	r3, [r7, #24]
 8000acc:	43db      	mvns	r3, r3
 8000ace:	4929      	ldr	r1, [pc, #164]	; (8000b74 <HAL_GPIO_Init+0x2f0>)
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d006      	beq.n	8000aee <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ae0:	4b24      	ldr	r3, [pc, #144]	; (8000b74 <HAL_GPIO_Init+0x2f0>)
 8000ae2:	689a      	ldr	r2, [r3, #8]
 8000ae4:	4923      	ldr	r1, [pc, #140]	; (8000b74 <HAL_GPIO_Init+0x2f0>)
 8000ae6:	69bb      	ldr	r3, [r7, #24]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	608b      	str	r3, [r1, #8]
 8000aec:	e006      	b.n	8000afc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000aee:	4b21      	ldr	r3, [pc, #132]	; (8000b74 <HAL_GPIO_Init+0x2f0>)
 8000af0:	689a      	ldr	r2, [r3, #8]
 8000af2:	69bb      	ldr	r3, [r7, #24]
 8000af4:	43db      	mvns	r3, r3
 8000af6:	491f      	ldr	r1, [pc, #124]	; (8000b74 <HAL_GPIO_Init+0x2f0>)
 8000af8:	4013      	ands	r3, r2
 8000afa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d006      	beq.n	8000b16 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b08:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <HAL_GPIO_Init+0x2f0>)
 8000b0a:	68da      	ldr	r2, [r3, #12]
 8000b0c:	4919      	ldr	r1, [pc, #100]	; (8000b74 <HAL_GPIO_Init+0x2f0>)
 8000b0e:	69bb      	ldr	r3, [r7, #24]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	60cb      	str	r3, [r1, #12]
 8000b14:	e006      	b.n	8000b24 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b16:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <HAL_GPIO_Init+0x2f0>)
 8000b18:	68da      	ldr	r2, [r3, #12]
 8000b1a:	69bb      	ldr	r3, [r7, #24]
 8000b1c:	43db      	mvns	r3, r3
 8000b1e:	4915      	ldr	r1, [pc, #84]	; (8000b74 <HAL_GPIO_Init+0x2f0>)
 8000b20:	4013      	ands	r3, r2
 8000b22:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b26:	3301      	adds	r3, #1
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b30:	fa22 f303 	lsr.w	r3, r2, r3
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	f47f aeaf 	bne.w	8000898 <HAL_GPIO_Init+0x14>
  }
}
 8000b3a:	bf00      	nop
 8000b3c:	bf00      	nop
 8000b3e:	372c      	adds	r7, #44	; 0x2c
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bc80      	pop	{r7}
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	10320000 	.word	0x10320000
 8000b4c:	10310000 	.word	0x10310000
 8000b50:	10220000 	.word	0x10220000
 8000b54:	10210000 	.word	0x10210000
 8000b58:	10120000 	.word	0x10120000
 8000b5c:	10110000 	.word	0x10110000
 8000b60:	40021000 	.word	0x40021000
 8000b64:	40010000 	.word	0x40010000
 8000b68:	40010800 	.word	0x40010800
 8000b6c:	40010c00 	.word	0x40010c00
 8000b70:	40011000 	.word	0x40011000
 8000b74:	40010400 	.word	0x40010400

08000b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	460b      	mov	r3, r1
 8000b82:	807b      	strh	r3, [r7, #2]
 8000b84:	4613      	mov	r3, r2
 8000b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b88:	787b      	ldrb	r3, [r7, #1]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d003      	beq.n	8000b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b8e:	887a      	ldrh	r2, [r7, #2]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b94:	e003      	b.n	8000b9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b96:	887b      	ldrh	r3, [r7, #2]
 8000b98:	041a      	lsls	r2, r3, #16
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	611a      	str	r2, [r3, #16]
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr

08000ba8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000bb2:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bb4:	695a      	ldr	r2, [r3, #20]
 8000bb6:	88fb      	ldrh	r3, [r7, #6]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d006      	beq.n	8000bcc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000bbe:	4a05      	ldr	r2, [pc, #20]	; (8000bd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bc0:	88fb      	ldrh	r3, [r7, #6]
 8000bc2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000bc4:	88fb      	ldrh	r3, [r7, #6]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 f806 	bl	8000bd8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40010400 	.word	0x40010400

08000bd8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr

08000bec <PWR_OverloadWfe>:
static void PWR_OverloadWfe(void);

/* Private functions ---------------------------------------------------------*/
__NOINLINE
static void PWR_OverloadWfe(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  __asm volatile( "wfe" );
 8000bf0:	bf20      	wfe
  __asm volatile( "nop" );
 8000bf2:	bf00      	nop
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr

08000bfc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8000c00:	4b03      	ldr	r3, [pc, #12]	; (8000c10 <HAL_PWR_EnableBkUpAccess+0x14>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	601a      	str	r2, [r3, #0]
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	420e0020 	.word	0x420e0020

08000c14 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Clear PDDS bit in PWR register to specify entering in STOP mode when CPU enter in Deepsleep */ 
  CLEAR_BIT(PWR->CR,  PWR_CR_PDDS);
 8000c20:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <HAL_PWR_EnterSTOPMode+0x5c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <HAL_PWR_EnterSTOPMode+0x5c>)
 8000c26:	f023 0302 	bic.w	r3, r3, #2
 8000c2a:	6013      	str	r3, [r2, #0]

  /* Select the voltage regulator mode by setting LPDS bit in PWR register according to Regulator parameter value */
  MODIFY_REG(PWR->CR, PWR_CR_LPDS, Regulator);
 8000c2c:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <HAL_PWR_EnterSTOPMode+0x5c>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f023 0201 	bic.w	r2, r3, #1
 8000c34:	490e      	ldr	r1, [pc, #56]	; (8000c70 <HAL_PWR_EnterSTOPMode+0x5c>)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	600b      	str	r3, [r1, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000c3c:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <HAL_PWR_EnterSTOPMode+0x60>)
 8000c3e:	691b      	ldr	r3, [r3, #16]
 8000c40:	4a0c      	ldr	r2, [pc, #48]	; (8000c74 <HAL_PWR_EnterSTOPMode+0x60>)
 8000c42:	f043 0304 	orr.w	r3, r3, #4
 8000c46:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8000c48:	78fb      	ldrb	r3, [r7, #3]
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d101      	bne.n	8000c52 <HAL_PWR_EnterSTOPMode+0x3e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8000c4e:	bf30      	wfi
 8000c50:	e004      	b.n	8000c5c <HAL_PWR_EnterSTOPMode+0x48>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8000c52:	bf40      	sev
    PWR_OverloadWfe(); /* WFE redefine locally */
 8000c54:	f7ff ffca 	bl	8000bec <PWR_OverloadWfe>
    PWR_OverloadWfe(); /* WFE redefine locally */
 8000c58:	f7ff ffc8 	bl	8000bec <PWR_OverloadWfe>
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <HAL_PWR_EnterSTOPMode+0x60>)
 8000c5e:	691b      	ldr	r3, [r3, #16]
 8000c60:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <HAL_PWR_EnterSTOPMode+0x60>)
 8000c62:	f023 0304 	bic.w	r3, r3, #4
 8000c66:	6113      	str	r3, [r2, #16]
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40007000 	.word	0x40007000
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d101      	bne.n	8000c8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e26c      	b.n	8001164 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f000 8087 	beq.w	8000da6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c98:	4b92      	ldr	r3, [pc, #584]	; (8000ee4 <HAL_RCC_OscConfig+0x26c>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f003 030c 	and.w	r3, r3, #12
 8000ca0:	2b04      	cmp	r3, #4
 8000ca2:	d00c      	beq.n	8000cbe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ca4:	4b8f      	ldr	r3, [pc, #572]	; (8000ee4 <HAL_RCC_OscConfig+0x26c>)
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f003 030c 	and.w	r3, r3, #12
 8000cac:	2b08      	cmp	r3, #8
 8000cae:	d112      	bne.n	8000cd6 <HAL_RCC_OscConfig+0x5e>
 8000cb0:	4b8c      	ldr	r3, [pc, #560]	; (8000ee4 <HAL_RCC_OscConfig+0x26c>)
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cbc:	d10b      	bne.n	8000cd6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cbe:	4b89      	ldr	r3, [pc, #548]	; (8000ee4 <HAL_RCC_OscConfig+0x26c>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d06c      	beq.n	8000da4 <HAL_RCC_OscConfig+0x12c>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d168      	bne.n	8000da4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e246      	b.n	8001164 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cde:	d106      	bne.n	8000cee <HAL_RCC_OscConfig+0x76>
 8000ce0:	4b80      	ldr	r3, [pc, #512]	; (8000ee4 <HAL_RCC_OscConfig+0x26c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a7f      	ldr	r2, [pc, #508]	; (8000ee4 <HAL_RCC_OscConfig+0x26c>)
 8000ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cea:	6013      	str	r3, [r2, #0]
 8000cec:	e02e      	b.n	8000d4c <HAL_RCC_OscConfig+0xd4>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d10c      	bne.n	8000d10 <HAL_RCC_OscConfig+0x98>
 8000cf6:	4b7b      	ldr	r3, [pc, #492]	; (8000ee4 <HAL_RCC_OscConfig+0x26c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a7a      	ldr	r2, [pc, #488]	; (8000ee4 <HAL_RCC_OscConfig+0x26c>)
 8000cfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d00:	6013      	str	r3, [r2, #0]
 8000d02:	4b78      	ldr	r3, [pc, #480]	; (8000ee4 <HAL_RCC_OscConfig+0x26c>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a77      	ldr	r2, [pc, #476]	; (8000ee4 <HAL_RCC_OscConfig+0x26c>)
 8000d08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d0c:	6013      	str	r3, [r2, #0]
 8000d0e:	e01d      	b.n	8000d4c <HAL_RCC_OscConfig+0xd4>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d18:	d10c      	bne.n	8000d34 <HAL_RCC_OscConfig+0xbc>
 8000d1a:	4b72      	ldr	r3, [pc, #456]	; (8000ee4 <HAL_RCC_OscConfig+0x26c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a71      	ldr	r2, [pc, #452]	; (8000ee4 <HAL_RCC_OscConfig+0x26c>)
 8000d20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d24:	6013      	str	r3, [r2, #0]
 8000d26:	4b6f      	ldr	r3, [pc, #444]	; (8000ee4 <HAL_RCC_OscConfig+0x26c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a6e      	ldr	r2, [pc, #440]	; (8000ee4 <HAL_RCC_OscConfig+0x26c>)
 8000d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d30:	6013      	str	r3, [r2, #0]
 8000d32:	e00b      	b.n	8000d4c <HAL_RCC_OscConfig+0xd4>
 8000d34:	4b6b      	ldr	r3, [pc, #428]	; (8000ee4 <HAL_RCC_OscConfig+0x26c>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a6a      	ldr	r2, [pc, #424]	; (8000ee4 <HAL_RCC_OscConfig+0x26c>)
 8000d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d3e:	6013      	str	r3, [r2, #0]
 8000d40:	4b68      	ldr	r3, [pc, #416]	; (8000ee4 <HAL_RCC_OscConfig+0x26c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a67      	ldr	r2, [pc, #412]	; (8000ee4 <HAL_RCC_OscConfig+0x26c>)
 8000d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d013      	beq.n	8000d7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d54:	f7ff fc4c 	bl	80005f0 <HAL_GetTick>
 8000d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d5a:	e008      	b.n	8000d6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d5c:	f7ff fc48 	bl	80005f0 <HAL_GetTick>
 8000d60:	4602      	mov	r2, r0
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	2b64      	cmp	r3, #100	; 0x64
 8000d68:	d901      	bls.n	8000d6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	e1fa      	b.n	8001164 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d6e:	4b5d      	ldr	r3, [pc, #372]	; (8000ee4 <HAL_RCC_OscConfig+0x26c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d0f0      	beq.n	8000d5c <HAL_RCC_OscConfig+0xe4>
 8000d7a:	e014      	b.n	8000da6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d7c:	f7ff fc38 	bl	80005f0 <HAL_GetTick>
 8000d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d82:	e008      	b.n	8000d96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d84:	f7ff fc34 	bl	80005f0 <HAL_GetTick>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	2b64      	cmp	r3, #100	; 0x64
 8000d90:	d901      	bls.n	8000d96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d92:	2303      	movs	r3, #3
 8000d94:	e1e6      	b.n	8001164 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d96:	4b53      	ldr	r3, [pc, #332]	; (8000ee4 <HAL_RCC_OscConfig+0x26c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d1f0      	bne.n	8000d84 <HAL_RCC_OscConfig+0x10c>
 8000da2:	e000      	b.n	8000da6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f003 0302 	and.w	r3, r3, #2
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d063      	beq.n	8000e7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000db2:	4b4c      	ldr	r3, [pc, #304]	; (8000ee4 <HAL_RCC_OscConfig+0x26c>)
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 030c 	and.w	r3, r3, #12
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d00b      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000dbe:	4b49      	ldr	r3, [pc, #292]	; (8000ee4 <HAL_RCC_OscConfig+0x26c>)
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f003 030c 	and.w	r3, r3, #12
 8000dc6:	2b08      	cmp	r3, #8
 8000dc8:	d11c      	bne.n	8000e04 <HAL_RCC_OscConfig+0x18c>
 8000dca:	4b46      	ldr	r3, [pc, #280]	; (8000ee4 <HAL_RCC_OscConfig+0x26c>)
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d116      	bne.n	8000e04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dd6:	4b43      	ldr	r3, [pc, #268]	; (8000ee4 <HAL_RCC_OscConfig+0x26c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d005      	beq.n	8000dee <HAL_RCC_OscConfig+0x176>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	691b      	ldr	r3, [r3, #16]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d001      	beq.n	8000dee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e1ba      	b.n	8001164 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dee:	4b3d      	ldr	r3, [pc, #244]	; (8000ee4 <HAL_RCC_OscConfig+0x26c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	695b      	ldr	r3, [r3, #20]
 8000dfa:	00db      	lsls	r3, r3, #3
 8000dfc:	4939      	ldr	r1, [pc, #228]	; (8000ee4 <HAL_RCC_OscConfig+0x26c>)
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e02:	e03a      	b.n	8000e7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	691b      	ldr	r3, [r3, #16]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d020      	beq.n	8000e4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e0c:	4b36      	ldr	r3, [pc, #216]	; (8000ee8 <HAL_RCC_OscConfig+0x270>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e12:	f7ff fbed 	bl	80005f0 <HAL_GetTick>
 8000e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e18:	e008      	b.n	8000e2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e1a:	f7ff fbe9 	bl	80005f0 <HAL_GetTick>
 8000e1e:	4602      	mov	r2, r0
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d901      	bls.n	8000e2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	e19b      	b.n	8001164 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e2c:	4b2d      	ldr	r3, [pc, #180]	; (8000ee4 <HAL_RCC_OscConfig+0x26c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f003 0302 	and.w	r3, r3, #2
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d0f0      	beq.n	8000e1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e38:	4b2a      	ldr	r3, [pc, #168]	; (8000ee4 <HAL_RCC_OscConfig+0x26c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	695b      	ldr	r3, [r3, #20]
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	4927      	ldr	r1, [pc, #156]	; (8000ee4 <HAL_RCC_OscConfig+0x26c>)
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	600b      	str	r3, [r1, #0]
 8000e4c:	e015      	b.n	8000e7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e4e:	4b26      	ldr	r3, [pc, #152]	; (8000ee8 <HAL_RCC_OscConfig+0x270>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e54:	f7ff fbcc 	bl	80005f0 <HAL_GetTick>
 8000e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e5a:	e008      	b.n	8000e6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e5c:	f7ff fbc8 	bl	80005f0 <HAL_GetTick>
 8000e60:	4602      	mov	r2, r0
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d901      	bls.n	8000e6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	e17a      	b.n	8001164 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <HAL_RCC_OscConfig+0x26c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d1f0      	bne.n	8000e5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f003 0308 	and.w	r3, r3, #8
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d03a      	beq.n	8000efc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d019      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e8e:	4b17      	ldr	r3, [pc, #92]	; (8000eec <HAL_RCC_OscConfig+0x274>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e94:	f7ff fbac 	bl	80005f0 <HAL_GetTick>
 8000e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e9a:	e008      	b.n	8000eae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e9c:	f7ff fba8 	bl	80005f0 <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d901      	bls.n	8000eae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e15a      	b.n	8001164 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eae:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d0f0      	beq.n	8000e9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000eba:	2001      	movs	r0, #1
 8000ebc:	f000 fac4 	bl	8001448 <RCC_Delay>
 8000ec0:	e01c      	b.n	8000efc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <HAL_RCC_OscConfig+0x274>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ec8:	f7ff fb92 	bl	80005f0 <HAL_GetTick>
 8000ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ece:	e00f      	b.n	8000ef0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ed0:	f7ff fb8e 	bl	80005f0 <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d908      	bls.n	8000ef0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e140      	b.n	8001164 <HAL_RCC_OscConfig+0x4ec>
 8000ee2:	bf00      	nop
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	42420000 	.word	0x42420000
 8000eec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ef0:	4b9e      	ldr	r3, [pc, #632]	; (800116c <HAL_RCC_OscConfig+0x4f4>)
 8000ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef4:	f003 0302 	and.w	r3, r3, #2
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d1e9      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f003 0304 	and.w	r3, r3, #4
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f000 80a6 	beq.w	8001056 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f0e:	4b97      	ldr	r3, [pc, #604]	; (800116c <HAL_RCC_OscConfig+0x4f4>)
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d10d      	bne.n	8000f36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f1a:	4b94      	ldr	r3, [pc, #592]	; (800116c <HAL_RCC_OscConfig+0x4f4>)
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	4a93      	ldr	r2, [pc, #588]	; (800116c <HAL_RCC_OscConfig+0x4f4>)
 8000f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f24:	61d3      	str	r3, [r2, #28]
 8000f26:	4b91      	ldr	r3, [pc, #580]	; (800116c <HAL_RCC_OscConfig+0x4f4>)
 8000f28:	69db      	ldr	r3, [r3, #28]
 8000f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f32:	2301      	movs	r3, #1
 8000f34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f36:	4b8e      	ldr	r3, [pc, #568]	; (8001170 <HAL_RCC_OscConfig+0x4f8>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d118      	bne.n	8000f74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f42:	4b8b      	ldr	r3, [pc, #556]	; (8001170 <HAL_RCC_OscConfig+0x4f8>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a8a      	ldr	r2, [pc, #552]	; (8001170 <HAL_RCC_OscConfig+0x4f8>)
 8000f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f4e:	f7ff fb4f 	bl	80005f0 <HAL_GetTick>
 8000f52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f54:	e008      	b.n	8000f68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f56:	f7ff fb4b 	bl	80005f0 <HAL_GetTick>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	2b64      	cmp	r3, #100	; 0x64
 8000f62:	d901      	bls.n	8000f68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f64:	2303      	movs	r3, #3
 8000f66:	e0fd      	b.n	8001164 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f68:	4b81      	ldr	r3, [pc, #516]	; (8001170 <HAL_RCC_OscConfig+0x4f8>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d0f0      	beq.n	8000f56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d106      	bne.n	8000f8a <HAL_RCC_OscConfig+0x312>
 8000f7c:	4b7b      	ldr	r3, [pc, #492]	; (800116c <HAL_RCC_OscConfig+0x4f4>)
 8000f7e:	6a1b      	ldr	r3, [r3, #32]
 8000f80:	4a7a      	ldr	r2, [pc, #488]	; (800116c <HAL_RCC_OscConfig+0x4f4>)
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	6213      	str	r3, [r2, #32]
 8000f88:	e02d      	b.n	8000fe6 <HAL_RCC_OscConfig+0x36e>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d10c      	bne.n	8000fac <HAL_RCC_OscConfig+0x334>
 8000f92:	4b76      	ldr	r3, [pc, #472]	; (800116c <HAL_RCC_OscConfig+0x4f4>)
 8000f94:	6a1b      	ldr	r3, [r3, #32]
 8000f96:	4a75      	ldr	r2, [pc, #468]	; (800116c <HAL_RCC_OscConfig+0x4f4>)
 8000f98:	f023 0301 	bic.w	r3, r3, #1
 8000f9c:	6213      	str	r3, [r2, #32]
 8000f9e:	4b73      	ldr	r3, [pc, #460]	; (800116c <HAL_RCC_OscConfig+0x4f4>)
 8000fa0:	6a1b      	ldr	r3, [r3, #32]
 8000fa2:	4a72      	ldr	r2, [pc, #456]	; (800116c <HAL_RCC_OscConfig+0x4f4>)
 8000fa4:	f023 0304 	bic.w	r3, r3, #4
 8000fa8:	6213      	str	r3, [r2, #32]
 8000faa:	e01c      	b.n	8000fe6 <HAL_RCC_OscConfig+0x36e>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	2b05      	cmp	r3, #5
 8000fb2:	d10c      	bne.n	8000fce <HAL_RCC_OscConfig+0x356>
 8000fb4:	4b6d      	ldr	r3, [pc, #436]	; (800116c <HAL_RCC_OscConfig+0x4f4>)
 8000fb6:	6a1b      	ldr	r3, [r3, #32]
 8000fb8:	4a6c      	ldr	r2, [pc, #432]	; (800116c <HAL_RCC_OscConfig+0x4f4>)
 8000fba:	f043 0304 	orr.w	r3, r3, #4
 8000fbe:	6213      	str	r3, [r2, #32]
 8000fc0:	4b6a      	ldr	r3, [pc, #424]	; (800116c <HAL_RCC_OscConfig+0x4f4>)
 8000fc2:	6a1b      	ldr	r3, [r3, #32]
 8000fc4:	4a69      	ldr	r2, [pc, #420]	; (800116c <HAL_RCC_OscConfig+0x4f4>)
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	6213      	str	r3, [r2, #32]
 8000fcc:	e00b      	b.n	8000fe6 <HAL_RCC_OscConfig+0x36e>
 8000fce:	4b67      	ldr	r3, [pc, #412]	; (800116c <HAL_RCC_OscConfig+0x4f4>)
 8000fd0:	6a1b      	ldr	r3, [r3, #32]
 8000fd2:	4a66      	ldr	r2, [pc, #408]	; (800116c <HAL_RCC_OscConfig+0x4f4>)
 8000fd4:	f023 0301 	bic.w	r3, r3, #1
 8000fd8:	6213      	str	r3, [r2, #32]
 8000fda:	4b64      	ldr	r3, [pc, #400]	; (800116c <HAL_RCC_OscConfig+0x4f4>)
 8000fdc:	6a1b      	ldr	r3, [r3, #32]
 8000fde:	4a63      	ldr	r2, [pc, #396]	; (800116c <HAL_RCC_OscConfig+0x4f4>)
 8000fe0:	f023 0304 	bic.w	r3, r3, #4
 8000fe4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d015      	beq.n	800101a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fee:	f7ff faff 	bl	80005f0 <HAL_GetTick>
 8000ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ff4:	e00a      	b.n	800100c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ff6:	f7ff fafb 	bl	80005f0 <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	f241 3288 	movw	r2, #5000	; 0x1388
 8001004:	4293      	cmp	r3, r2
 8001006:	d901      	bls.n	800100c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001008:	2303      	movs	r3, #3
 800100a:	e0ab      	b.n	8001164 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800100c:	4b57      	ldr	r3, [pc, #348]	; (800116c <HAL_RCC_OscConfig+0x4f4>)
 800100e:	6a1b      	ldr	r3, [r3, #32]
 8001010:	f003 0302 	and.w	r3, r3, #2
 8001014:	2b00      	cmp	r3, #0
 8001016:	d0ee      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x37e>
 8001018:	e014      	b.n	8001044 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800101a:	f7ff fae9 	bl	80005f0 <HAL_GetTick>
 800101e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001020:	e00a      	b.n	8001038 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001022:	f7ff fae5 	bl	80005f0 <HAL_GetTick>
 8001026:	4602      	mov	r2, r0
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001030:	4293      	cmp	r3, r2
 8001032:	d901      	bls.n	8001038 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001034:	2303      	movs	r3, #3
 8001036:	e095      	b.n	8001164 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001038:	4b4c      	ldr	r3, [pc, #304]	; (800116c <HAL_RCC_OscConfig+0x4f4>)
 800103a:	6a1b      	ldr	r3, [r3, #32]
 800103c:	f003 0302 	and.w	r3, r3, #2
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1ee      	bne.n	8001022 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001044:	7dfb      	ldrb	r3, [r7, #23]
 8001046:	2b01      	cmp	r3, #1
 8001048:	d105      	bne.n	8001056 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800104a:	4b48      	ldr	r3, [pc, #288]	; (800116c <HAL_RCC_OscConfig+0x4f4>)
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	4a47      	ldr	r2, [pc, #284]	; (800116c <HAL_RCC_OscConfig+0x4f4>)
 8001050:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001054:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	2b00      	cmp	r3, #0
 800105c:	f000 8081 	beq.w	8001162 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001060:	4b42      	ldr	r3, [pc, #264]	; (800116c <HAL_RCC_OscConfig+0x4f4>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 030c 	and.w	r3, r3, #12
 8001068:	2b08      	cmp	r3, #8
 800106a:	d061      	beq.n	8001130 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	69db      	ldr	r3, [r3, #28]
 8001070:	2b02      	cmp	r3, #2
 8001072:	d146      	bne.n	8001102 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001074:	4b3f      	ldr	r3, [pc, #252]	; (8001174 <HAL_RCC_OscConfig+0x4fc>)
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800107a:	f7ff fab9 	bl	80005f0 <HAL_GetTick>
 800107e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001080:	e008      	b.n	8001094 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001082:	f7ff fab5 	bl	80005f0 <HAL_GetTick>
 8001086:	4602      	mov	r2, r0
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	2b02      	cmp	r3, #2
 800108e:	d901      	bls.n	8001094 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001090:	2303      	movs	r3, #3
 8001092:	e067      	b.n	8001164 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001094:	4b35      	ldr	r3, [pc, #212]	; (800116c <HAL_RCC_OscConfig+0x4f4>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d1f0      	bne.n	8001082 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a1b      	ldr	r3, [r3, #32]
 80010a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010a8:	d108      	bne.n	80010bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010aa:	4b30      	ldr	r3, [pc, #192]	; (800116c <HAL_RCC_OscConfig+0x4f4>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	492d      	ldr	r1, [pc, #180]	; (800116c <HAL_RCC_OscConfig+0x4f4>)
 80010b8:	4313      	orrs	r3, r2
 80010ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010bc:	4b2b      	ldr	r3, [pc, #172]	; (800116c <HAL_RCC_OscConfig+0x4f4>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a19      	ldr	r1, [r3, #32]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010cc:	430b      	orrs	r3, r1
 80010ce:	4927      	ldr	r1, [pc, #156]	; (800116c <HAL_RCC_OscConfig+0x4f4>)
 80010d0:	4313      	orrs	r3, r2
 80010d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010d4:	4b27      	ldr	r3, [pc, #156]	; (8001174 <HAL_RCC_OscConfig+0x4fc>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010da:	f7ff fa89 	bl	80005f0 <HAL_GetTick>
 80010de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010e0:	e008      	b.n	80010f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010e2:	f7ff fa85 	bl	80005f0 <HAL_GetTick>
 80010e6:	4602      	mov	r2, r0
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d901      	bls.n	80010f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e037      	b.n	8001164 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010f4:	4b1d      	ldr	r3, [pc, #116]	; (800116c <HAL_RCC_OscConfig+0x4f4>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d0f0      	beq.n	80010e2 <HAL_RCC_OscConfig+0x46a>
 8001100:	e02f      	b.n	8001162 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001102:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <HAL_RCC_OscConfig+0x4fc>)
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001108:	f7ff fa72 	bl	80005f0 <HAL_GetTick>
 800110c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800110e:	e008      	b.n	8001122 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001110:	f7ff fa6e 	bl	80005f0 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b02      	cmp	r3, #2
 800111c:	d901      	bls.n	8001122 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e020      	b.n	8001164 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001122:	4b12      	ldr	r3, [pc, #72]	; (800116c <HAL_RCC_OscConfig+0x4f4>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1f0      	bne.n	8001110 <HAL_RCC_OscConfig+0x498>
 800112e:	e018      	b.n	8001162 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	69db      	ldr	r3, [r3, #28]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d101      	bne.n	800113c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e013      	b.n	8001164 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800113c:	4b0b      	ldr	r3, [pc, #44]	; (800116c <HAL_RCC_OscConfig+0x4f4>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a1b      	ldr	r3, [r3, #32]
 800114c:	429a      	cmp	r2, r3
 800114e:	d106      	bne.n	800115e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800115a:	429a      	cmp	r2, r3
 800115c:	d001      	beq.n	8001162 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e000      	b.n	8001164 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001162:	2300      	movs	r3, #0
}
 8001164:	4618      	mov	r0, r3
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40021000 	.word	0x40021000
 8001170:	40007000 	.word	0x40007000
 8001174:	42420060 	.word	0x42420060

08001178 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d101      	bne.n	800118c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e0d0      	b.n	800132e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800118c:	4b6a      	ldr	r3, [pc, #424]	; (8001338 <HAL_RCC_ClockConfig+0x1c0>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0307 	and.w	r3, r3, #7
 8001194:	683a      	ldr	r2, [r7, #0]
 8001196:	429a      	cmp	r2, r3
 8001198:	d910      	bls.n	80011bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800119a:	4b67      	ldr	r3, [pc, #412]	; (8001338 <HAL_RCC_ClockConfig+0x1c0>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f023 0207 	bic.w	r2, r3, #7
 80011a2:	4965      	ldr	r1, [pc, #404]	; (8001338 <HAL_RCC_ClockConfig+0x1c0>)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011aa:	4b63      	ldr	r3, [pc, #396]	; (8001338 <HAL_RCC_ClockConfig+0x1c0>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	683a      	ldr	r2, [r7, #0]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d001      	beq.n	80011bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e0b8      	b.n	800132e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d020      	beq.n	800120a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d005      	beq.n	80011e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011d4:	4b59      	ldr	r3, [pc, #356]	; (800133c <HAL_RCC_ClockConfig+0x1c4>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	4a58      	ldr	r2, [pc, #352]	; (800133c <HAL_RCC_ClockConfig+0x1c4>)
 80011da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80011de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0308 	and.w	r3, r3, #8
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d005      	beq.n	80011f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011ec:	4b53      	ldr	r3, [pc, #332]	; (800133c <HAL_RCC_ClockConfig+0x1c4>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	4a52      	ldr	r2, [pc, #328]	; (800133c <HAL_RCC_ClockConfig+0x1c4>)
 80011f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80011f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011f8:	4b50      	ldr	r3, [pc, #320]	; (800133c <HAL_RCC_ClockConfig+0x1c4>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	494d      	ldr	r1, [pc, #308]	; (800133c <HAL_RCC_ClockConfig+0x1c4>)
 8001206:	4313      	orrs	r3, r2
 8001208:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	2b00      	cmp	r3, #0
 8001214:	d040      	beq.n	8001298 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d107      	bne.n	800122e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800121e:	4b47      	ldr	r3, [pc, #284]	; (800133c <HAL_RCC_ClockConfig+0x1c4>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d115      	bne.n	8001256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e07f      	b.n	800132e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	2b02      	cmp	r3, #2
 8001234:	d107      	bne.n	8001246 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001236:	4b41      	ldr	r3, [pc, #260]	; (800133c <HAL_RCC_ClockConfig+0x1c4>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d109      	bne.n	8001256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e073      	b.n	800132e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001246:	4b3d      	ldr	r3, [pc, #244]	; (800133c <HAL_RCC_ClockConfig+0x1c4>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d101      	bne.n	8001256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e06b      	b.n	800132e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001256:	4b39      	ldr	r3, [pc, #228]	; (800133c <HAL_RCC_ClockConfig+0x1c4>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f023 0203 	bic.w	r2, r3, #3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	4936      	ldr	r1, [pc, #216]	; (800133c <HAL_RCC_ClockConfig+0x1c4>)
 8001264:	4313      	orrs	r3, r2
 8001266:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001268:	f7ff f9c2 	bl	80005f0 <HAL_GetTick>
 800126c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800126e:	e00a      	b.n	8001286 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001270:	f7ff f9be 	bl	80005f0 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	f241 3288 	movw	r2, #5000	; 0x1388
 800127e:	4293      	cmp	r3, r2
 8001280:	d901      	bls.n	8001286 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e053      	b.n	800132e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001286:	4b2d      	ldr	r3, [pc, #180]	; (800133c <HAL_RCC_ClockConfig+0x1c4>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f003 020c 	and.w	r2, r3, #12
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	429a      	cmp	r2, r3
 8001296:	d1eb      	bne.n	8001270 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001298:	4b27      	ldr	r3, [pc, #156]	; (8001338 <HAL_RCC_ClockConfig+0x1c0>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0307 	and.w	r3, r3, #7
 80012a0:	683a      	ldr	r2, [r7, #0]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d210      	bcs.n	80012c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012a6:	4b24      	ldr	r3, [pc, #144]	; (8001338 <HAL_RCC_ClockConfig+0x1c0>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f023 0207 	bic.w	r2, r3, #7
 80012ae:	4922      	ldr	r1, [pc, #136]	; (8001338 <HAL_RCC_ClockConfig+0x1c0>)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012b6:	4b20      	ldr	r3, [pc, #128]	; (8001338 <HAL_RCC_ClockConfig+0x1c0>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	683a      	ldr	r2, [r7, #0]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d001      	beq.n	80012c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e032      	b.n	800132e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d008      	beq.n	80012e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012d4:	4b19      	ldr	r3, [pc, #100]	; (800133c <HAL_RCC_ClockConfig+0x1c4>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	4916      	ldr	r1, [pc, #88]	; (800133c <HAL_RCC_ClockConfig+0x1c4>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0308 	and.w	r3, r3, #8
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d009      	beq.n	8001306 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012f2:	4b12      	ldr	r3, [pc, #72]	; (800133c <HAL_RCC_ClockConfig+0x1c4>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	490e      	ldr	r1, [pc, #56]	; (800133c <HAL_RCC_ClockConfig+0x1c4>)
 8001302:	4313      	orrs	r3, r2
 8001304:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001306:	f000 f821 	bl	800134c <HAL_RCC_GetSysClockFreq>
 800130a:	4602      	mov	r2, r0
 800130c:	4b0b      	ldr	r3, [pc, #44]	; (800133c <HAL_RCC_ClockConfig+0x1c4>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	091b      	lsrs	r3, r3, #4
 8001312:	f003 030f 	and.w	r3, r3, #15
 8001316:	490a      	ldr	r1, [pc, #40]	; (8001340 <HAL_RCC_ClockConfig+0x1c8>)
 8001318:	5ccb      	ldrb	r3, [r1, r3]
 800131a:	fa22 f303 	lsr.w	r3, r2, r3
 800131e:	4a09      	ldr	r2, [pc, #36]	; (8001344 <HAL_RCC_ClockConfig+0x1cc>)
 8001320:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <HAL_RCC_ClockConfig+0x1d0>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f920 	bl	800056c <HAL_InitTick>

  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40022000 	.word	0x40022000
 800133c:	40021000 	.word	0x40021000
 8001340:	080023f4 	.word	0x080023f4
 8001344:	20000000 	.word	0x20000000
 8001348:	20000004 	.word	0x20000004

0800134c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800134c:	b490      	push	{r4, r7}
 800134e:	b08a      	sub	sp, #40	; 0x28
 8001350:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001352:	4b2a      	ldr	r3, [pc, #168]	; (80013fc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001354:	1d3c      	adds	r4, r7, #4
 8001356:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001358:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800135c:	f240 2301 	movw	r3, #513	; 0x201
 8001360:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
 8001366:	2300      	movs	r3, #0
 8001368:	61bb      	str	r3, [r7, #24]
 800136a:	2300      	movs	r3, #0
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001372:	2300      	movs	r3, #0
 8001374:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001376:	4b22      	ldr	r3, [pc, #136]	; (8001400 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f003 030c 	and.w	r3, r3, #12
 8001382:	2b04      	cmp	r3, #4
 8001384:	d002      	beq.n	800138c <HAL_RCC_GetSysClockFreq+0x40>
 8001386:	2b08      	cmp	r3, #8
 8001388:	d003      	beq.n	8001392 <HAL_RCC_GetSysClockFreq+0x46>
 800138a:	e02d      	b.n	80013e8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800138c:	4b1d      	ldr	r3, [pc, #116]	; (8001404 <HAL_RCC_GetSysClockFreq+0xb8>)
 800138e:	623b      	str	r3, [r7, #32]
      break;
 8001390:	e02d      	b.n	80013ee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	0c9b      	lsrs	r3, r3, #18
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800139e:	4413      	add	r3, r2
 80013a0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80013a4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d013      	beq.n	80013d8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013b0:	4b13      	ldr	r3, [pc, #76]	; (8001400 <HAL_RCC_GetSysClockFreq+0xb4>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	0c5b      	lsrs	r3, r3, #17
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80013be:	4413      	add	r3, r2
 80013c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80013c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	4a0e      	ldr	r2, [pc, #56]	; (8001404 <HAL_RCC_GetSysClockFreq+0xb8>)
 80013ca:	fb02 f203 	mul.w	r2, r2, r3
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
 80013d6:	e004      	b.n	80013e2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	4a0b      	ldr	r2, [pc, #44]	; (8001408 <HAL_RCC_GetSysClockFreq+0xbc>)
 80013dc:	fb02 f303 	mul.w	r3, r2, r3
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80013e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e4:	623b      	str	r3, [r7, #32]
      break;
 80013e6:	e002      	b.n	80013ee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_RCC_GetSysClockFreq+0xb8>)
 80013ea:	623b      	str	r3, [r7, #32]
      break;
 80013ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013ee:	6a3b      	ldr	r3, [r7, #32]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3728      	adds	r7, #40	; 0x28
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc90      	pop	{r4, r7}
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	080023d4 	.word	0x080023d4
 8001400:	40021000 	.word	0x40021000
 8001404:	007a1200 	.word	0x007a1200
 8001408:	003d0900 	.word	0x003d0900

0800140c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001410:	4b02      	ldr	r3, [pc, #8]	; (800141c <HAL_RCC_GetHCLKFreq+0x10>)
 8001412:	681b      	ldr	r3, [r3, #0]
}
 8001414:	4618      	mov	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr
 800141c:	20000000 	.word	0x20000000

08001420 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001424:	f7ff fff2 	bl	800140c <HAL_RCC_GetHCLKFreq>
 8001428:	4602      	mov	r2, r0
 800142a:	4b05      	ldr	r3, [pc, #20]	; (8001440 <HAL_RCC_GetPCLK2Freq+0x20>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	0adb      	lsrs	r3, r3, #11
 8001430:	f003 0307 	and.w	r3, r3, #7
 8001434:	4903      	ldr	r1, [pc, #12]	; (8001444 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001436:	5ccb      	ldrb	r3, [r1, r3]
 8001438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800143c:	4618      	mov	r0, r3
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40021000 	.word	0x40021000
 8001444:	08002404 	.word	0x08002404

08001448 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001450:	4b0a      	ldr	r3, [pc, #40]	; (800147c <RCC_Delay+0x34>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <RCC_Delay+0x38>)
 8001456:	fba2 2303 	umull	r2, r3, r2, r3
 800145a:	0a5b      	lsrs	r3, r3, #9
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	fb02 f303 	mul.w	r3, r2, r3
 8001462:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001464:	bf00      	nop
  }
  while (Delay --);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	1e5a      	subs	r2, r3, #1
 800146a:	60fa      	str	r2, [r7, #12]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1f9      	bne.n	8001464 <RCC_Delay+0x1c>
}
 8001470:	bf00      	nop
 8001472:	bf00      	nop
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr
 800147c:	20000000 	.word	0x20000000
 8001480:	10624dd3 	.word	0x10624dd3

08001484 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800148c:	2300      	movs	r3, #0
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	2300      	movs	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	2b00      	cmp	r3, #0
 800149e:	d07d      	beq.n	800159c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80014a0:	2300      	movs	r3, #0
 80014a2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014a4:	4b4f      	ldr	r3, [pc, #316]	; (80015e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80014a6:	69db      	ldr	r3, [r3, #28]
 80014a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d10d      	bne.n	80014cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014b0:	4b4c      	ldr	r3, [pc, #304]	; (80015e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80014b2:	69db      	ldr	r3, [r3, #28]
 80014b4:	4a4b      	ldr	r2, [pc, #300]	; (80015e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80014b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ba:	61d3      	str	r3, [r2, #28]
 80014bc:	4b49      	ldr	r3, [pc, #292]	; (80015e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80014be:	69db      	ldr	r3, [r3, #28]
 80014c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014c8:	2301      	movs	r3, #1
 80014ca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014cc:	4b46      	ldr	r3, [pc, #280]	; (80015e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d118      	bne.n	800150a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014d8:	4b43      	ldr	r3, [pc, #268]	; (80015e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a42      	ldr	r2, [pc, #264]	; (80015e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80014de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e4:	f7ff f884 	bl	80005f0 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ea:	e008      	b.n	80014fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ec:	f7ff f880 	bl	80005f0 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b64      	cmp	r3, #100	; 0x64
 80014f8:	d901      	bls.n	80014fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e06d      	b.n	80015da <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014fe:	4b3a      	ldr	r3, [pc, #232]	; (80015e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0f0      	beq.n	80014ec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800150a:	4b36      	ldr	r3, [pc, #216]	; (80015e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800150c:	6a1b      	ldr	r3, [r3, #32]
 800150e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001512:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d02e      	beq.n	8001578 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	429a      	cmp	r2, r3
 8001526:	d027      	beq.n	8001578 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001528:	4b2e      	ldr	r3, [pc, #184]	; (80015e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001530:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001532:	4b2e      	ldr	r3, [pc, #184]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001534:	2201      	movs	r2, #1
 8001536:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001538:	4b2c      	ldr	r3, [pc, #176]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800153e:	4a29      	ldr	r2, [pc, #164]	; (80015e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	2b00      	cmp	r3, #0
 800154c:	d014      	beq.n	8001578 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154e:	f7ff f84f 	bl	80005f0 <HAL_GetTick>
 8001552:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001554:	e00a      	b.n	800156c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001556:	f7ff f84b 	bl	80005f0 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	f241 3288 	movw	r2, #5000	; 0x1388
 8001564:	4293      	cmp	r3, r2
 8001566:	d901      	bls.n	800156c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e036      	b.n	80015da <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800156c:	4b1d      	ldr	r3, [pc, #116]	; (80015e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800156e:	6a1b      	ldr	r3, [r3, #32]
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0ee      	beq.n	8001556 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001578:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	4917      	ldr	r1, [pc, #92]	; (80015e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001586:	4313      	orrs	r3, r2
 8001588:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800158a:	7dfb      	ldrb	r3, [r7, #23]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d105      	bne.n	800159c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001590:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001592:	69db      	ldr	r3, [r3, #28]
 8001594:	4a13      	ldr	r2, [pc, #76]	; (80015e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001596:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800159a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d008      	beq.n	80015ba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80015a8:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	490b      	ldr	r1, [pc, #44]	; (80015e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0310 	and.w	r3, r3, #16
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d008      	beq.n	80015d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80015c6:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	4904      	ldr	r1, [pc, #16]	; (80015e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40021000 	.word	0x40021000
 80015e8:	40007000 	.word	0x40007000
 80015ec:	42420440 	.word	0x42420440

080015f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80015f0:	b590      	push	{r4, r7, lr}
 80015f2:	b08d      	sub	sp, #52	; 0x34
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80015f8:	4b5a      	ldr	r3, [pc, #360]	; (8001764 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80015fa:	f107 040c 	add.w	r4, r7, #12
 80015fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001600:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001604:	f240 2301 	movw	r3, #513	; 0x201
 8001608:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800160a:	2300      	movs	r3, #0
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
 800160e:	2300      	movs	r3, #0
 8001610:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001612:	2300      	movs	r3, #0
 8001614:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
 800161a:	2300      	movs	r3, #0
 800161c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b10      	cmp	r3, #16
 8001622:	d00a      	beq.n	800163a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b10      	cmp	r3, #16
 8001628:	f200 8091 	bhi.w	800174e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d04c      	beq.n	80016cc <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b02      	cmp	r3, #2
 8001636:	d07c      	beq.n	8001732 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001638:	e089      	b.n	800174e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 800163a:	4b4b      	ldr	r3, [pc, #300]	; (8001768 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001640:	4b49      	ldr	r3, [pc, #292]	; (8001768 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001648:	2b00      	cmp	r3, #0
 800164a:	f000 8082 	beq.w	8001752 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	0c9b      	lsrs	r3, r3, #18
 8001652:	f003 030f 	and.w	r3, r3, #15
 8001656:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800165a:	4413      	add	r3, r2
 800165c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001660:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d018      	beq.n	800169e <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800166c:	4b3e      	ldr	r3, [pc, #248]	; (8001768 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	0c5b      	lsrs	r3, r3, #17
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800167a:	4413      	add	r3, r2
 800167c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d00d      	beq.n	80016a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800168c:	4a37      	ldr	r2, [pc, #220]	; (800176c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	fbb2 f2f3 	udiv	r2, r2, r3
 8001694:	6a3b      	ldr	r3, [r7, #32]
 8001696:	fb02 f303 	mul.w	r3, r2, r3
 800169a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800169c:	e004      	b.n	80016a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800169e:	6a3b      	ldr	r3, [r7, #32]
 80016a0:	4a33      	ldr	r2, [pc, #204]	; (8001770 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 80016a2:	fb02 f303 	mul.w	r3, r2, r3
 80016a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80016a8:	4b2f      	ldr	r3, [pc, #188]	; (8001768 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016b4:	d102      	bne.n	80016bc <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 80016b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80016ba:	e04a      	b.n	8001752 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 80016bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	4a2c      	ldr	r2, [pc, #176]	; (8001774 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 80016c2:	fba2 2303 	umull	r2, r3, r2, r3
 80016c6:	085b      	lsrs	r3, r3, #1
 80016c8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80016ca:	e042      	b.n	8001752 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 80016cc:	4b26      	ldr	r3, [pc, #152]	; (8001768 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016dc:	d108      	bne.n	80016f0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d003      	beq.n	80016f0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 80016e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80016ee:	e01f      	b.n	8001730 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016fa:	d109      	bne.n	8001710 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80016fc:	4b1a      	ldr	r3, [pc, #104]	; (8001768 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80016fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d003      	beq.n	8001710 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8001708:	f649 4340 	movw	r3, #40000	; 0x9c40
 800170c:	62bb      	str	r3, [r7, #40]	; 0x28
 800170e:	e00f      	b.n	8001730 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001716:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800171a:	d11c      	bne.n	8001756 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 800171c:	4b12      	ldr	r3, [pc, #72]	; (8001768 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d016      	beq.n	8001756 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8001728:	f24f 4324 	movw	r3, #62500	; 0xf424
 800172c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800172e:	e012      	b.n	8001756 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8001730:	e011      	b.n	8001756 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001732:	f7ff fe75 	bl	8001420 <HAL_RCC_GetPCLK2Freq>
 8001736:	4602      	mov	r2, r0
 8001738:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	0b9b      	lsrs	r3, r3, #14
 800173e:	f003 0303 	and.w	r3, r3, #3
 8001742:	3301      	adds	r3, #1
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	fbb2 f3f3 	udiv	r3, r2, r3
 800174a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800174c:	e004      	b.n	8001758 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800174e:	bf00      	nop
 8001750:	e002      	b.n	8001758 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8001752:	bf00      	nop
 8001754:	e000      	b.n	8001758 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8001756:	bf00      	nop
    }
  }
  return (frequency);
 8001758:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800175a:	4618      	mov	r0, r3
 800175c:	3734      	adds	r7, #52	; 0x34
 800175e:	46bd      	mov	sp, r7
 8001760:	bd90      	pop	{r4, r7, pc}
 8001762:	bf00      	nop
 8001764:	080023e4 	.word	0x080023e4
 8001768:	40021000 	.word	0x40021000
 800176c:	007a1200 	.word	0x007a1200
 8001770:	003d0900 	.word	0x003d0900
 8001774:	aaaaaaab 	.word	0xaaaaaaab

08001778 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8001780:	2300      	movs	r3, #0
 8001782:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e084      	b.n	8001898 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	7c5b      	ldrb	r3, [r3, #17]
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b00      	cmp	r3, #0
 8001796:	d105      	bne.n	80017a4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7fe fe50 	bl	8000444 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2202      	movs	r2, #2
 80017a8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 fb39 	bl	8001e22 <HAL_RTC_WaitForSynchro>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d004      	beq.n	80017c0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2204      	movs	r2, #4
 80017ba:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e06b      	b.n	8001898 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 fbf2 	bl	8001faa <RTC_EnterInitMode>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d004      	beq.n	80017d6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2204      	movs	r2, #4
 80017d0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e060      	b.n	8001898 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 0207 	bic.w	r2, r2, #7
 80017e4:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d005      	beq.n	80017fa <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80017ee:	4b2c      	ldr	r3, [pc, #176]	; (80018a0 <HAL_RTC_Init+0x128>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a2b      	ldr	r2, [pc, #172]	; (80018a0 <HAL_RTC_Init+0x128>)
 80017f4:	f023 0301 	bic.w	r3, r3, #1
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80017fa:	4b29      	ldr	r3, [pc, #164]	; (80018a0 <HAL_RTC_Init+0x128>)
 80017fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fe:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	4926      	ldr	r1, [pc, #152]	; (80018a0 <HAL_RTC_Init+0x128>)
 8001808:	4313      	orrs	r3, r2
 800180a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001814:	d003      	beq.n	800181e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	e00e      	b.n	800183c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800181e:	2001      	movs	r0, #1
 8001820:	f7ff fee6 	bl	80015f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8001824:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d104      	bne.n	8001836 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2204      	movs	r2, #4
 8001830:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e030      	b.n	8001898 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	3b01      	subs	r3, #1
 800183a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f023 010f 	bic.w	r1, r3, #15
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	0c1a      	lsrs	r2, r3, #16
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	430a      	orrs	r2, r1
 8001850:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	0c1b      	lsrs	r3, r3, #16
 800185a:	041b      	lsls	r3, r3, #16
 800185c:	68fa      	ldr	r2, [r7, #12]
 800185e:	b291      	uxth	r1, r2
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	6812      	ldr	r2, [r2, #0]
 8001864:	430b      	orrs	r3, r1
 8001866:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f000 fbc6 	bl	8001ffa <RTC_ExitInitMode>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d004      	beq.n	800187e <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2204      	movs	r2, #4
 8001878:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e00c      	b.n	8001898 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2201      	movs	r2, #1
 800188e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2201      	movs	r2, #1
 8001894:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8001896:	2300      	movs	r3, #0
  }
}
 8001898:	4618      	mov	r0, r3
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40006c00 	.word	0x40006c00

080018a4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80018a4:	b590      	push	{r4, r7, lr}
 80018a6:	b087      	sub	sp, #28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
 80018b4:	2300      	movs	r3, #0
 80018b6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d002      	beq.n	80018c4 <HAL_RTC_SetTime+0x20>
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e080      	b.n	80019ca <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	7c1b      	ldrb	r3, [r3, #16]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d101      	bne.n	80018d4 <HAL_RTC_SetTime+0x30>
 80018d0:	2302      	movs	r3, #2
 80018d2:	e07a      	b.n	80019ca <HAL_RTC_SetTime+0x126>
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2201      	movs	r2, #1
 80018d8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2202      	movs	r2, #2
 80018de:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d113      	bne.n	800190e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	461a      	mov	r2, r3
 80018ec:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80018f0:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	785b      	ldrb	r3, [r3, #1]
 80018f8:	4619      	mov	r1, r3
 80018fa:	460b      	mov	r3, r1
 80018fc:	011b      	lsls	r3, r3, #4
 80018fe:	1a5b      	subs	r3, r3, r1
 8001900:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001902:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8001904:	68ba      	ldr	r2, [r7, #8]
 8001906:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001908:	4413      	add	r3, r2
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	e01e      	b.n	800194c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f000 fbb6 	bl	8002084 <RTC_Bcd2ToByte>
 8001918:	4603      	mov	r3, r0
 800191a:	461a      	mov	r2, r3
 800191c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001920:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	785b      	ldrb	r3, [r3, #1]
 8001928:	4618      	mov	r0, r3
 800192a:	f000 fbab 	bl	8002084 <RTC_Bcd2ToByte>
 800192e:	4603      	mov	r3, r0
 8001930:	461a      	mov	r2, r3
 8001932:	4613      	mov	r3, r2
 8001934:	011b      	lsls	r3, r3, #4
 8001936:	1a9b      	subs	r3, r3, r2
 8001938:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800193a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	789b      	ldrb	r3, [r3, #2]
 8001940:	4618      	mov	r0, r3
 8001942:	f000 fb9f 	bl	8002084 <RTC_Bcd2ToByte>
 8001946:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001948:	4423      	add	r3, r4
 800194a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800194c:	6979      	ldr	r1, [r7, #20]
 800194e:	68f8      	ldr	r0, [r7, #12]
 8001950:	f000 fac4 	bl	8001edc <RTC_WriteTimeCounter>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d007      	beq.n	800196a <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2204      	movs	r2, #4
 800195e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2200      	movs	r2, #0
 8001964:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e02f      	b.n	80019ca <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 0205 	bic.w	r2, r2, #5
 8001978:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f000 fad5 	bl	8001f2a <RTC_ReadAlarmCounter>
 8001980:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001988:	d018      	beq.n	80019bc <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	429a      	cmp	r2, r3
 8001990:	d214      	bcs.n	80019bc <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001998:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800199c:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800199e:	6939      	ldr	r1, [r7, #16]
 80019a0:	68f8      	ldr	r0, [r7, #12]
 80019a2:	f000 fadb 	bl	8001f5c <RTC_WriteAlarmCounter>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d007      	beq.n	80019bc <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2204      	movs	r2, #4
 80019b0:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2200      	movs	r2, #0
 80019b6:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e006      	b.n	80019ca <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2201      	movs	r2, #1
 80019c0:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2200      	movs	r2, #0
 80019c6:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80019c8:	2300      	movs	r3, #0
  }
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	371c      	adds	r7, #28
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd90      	pop	{r4, r7, pc}
	...

080019d4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b088      	sub	sp, #32
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61bb      	str	r3, [r7, #24]
 80019e4:	2300      	movs	r3, #0
 80019e6:	61fb      	str	r3, [r7, #28]
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	2300      	movs	r3, #0
 80019ee:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d002      	beq.n	80019fc <HAL_RTC_GetTime+0x28>
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d101      	bne.n	8001a00 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e0b5      	b.n	8001b6c <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f003 0304 	and.w	r3, r3, #4
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e0ac      	b.n	8001b6c <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f000 fa32 	bl	8001e7c <RTC_ReadTimeCounter>
 8001a18:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	4a55      	ldr	r2, [pc, #340]	; (8001b74 <HAL_RTC_GetTime+0x1a0>)
 8001a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a22:	0adb      	lsrs	r3, r3, #11
 8001a24:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4b52      	ldr	r3, [pc, #328]	; (8001b74 <HAL_RTC_GetTime+0x1a0>)
 8001a2a:	fba3 1302 	umull	r1, r3, r3, r2
 8001a2e:	0adb      	lsrs	r3, r3, #11
 8001a30:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001a34:	fb01 f303 	mul.w	r3, r1, r3
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	4a4f      	ldr	r2, [pc, #316]	; (8001b78 <HAL_RTC_GetTime+0x1a4>)
 8001a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a40:	095b      	lsrs	r3, r3, #5
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	4a4a      	ldr	r2, [pc, #296]	; (8001b74 <HAL_RTC_GetTime+0x1a0>)
 8001a4c:	fba2 1203 	umull	r1, r2, r2, r3
 8001a50:	0ad2      	lsrs	r2, r2, #11
 8001a52:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001a56:	fb01 f202 	mul.w	r2, r1, r2
 8001a5a:	1a9a      	subs	r2, r3, r2
 8001a5c:	4b46      	ldr	r3, [pc, #280]	; (8001b78 <HAL_RTC_GetTime+0x1a4>)
 8001a5e:	fba3 1302 	umull	r1, r3, r3, r2
 8001a62:	0959      	lsrs	r1, r3, #5
 8001a64:	460b      	mov	r3, r1
 8001a66:	011b      	lsls	r3, r3, #4
 8001a68:	1a5b      	subs	r3, r3, r1
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	1ad1      	subs	r1, r2, r3
 8001a6e:	b2ca      	uxtb	r2, r1
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	2b17      	cmp	r3, #23
 8001a78:	d955      	bls.n	8001b26 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	4a3f      	ldr	r2, [pc, #252]	; (8001b7c <HAL_RTC_GetTime+0x1a8>)
 8001a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a82:	091b      	lsrs	r3, r3, #4
 8001a84:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8001a86:	6939      	ldr	r1, [r7, #16]
 8001a88:	4b3c      	ldr	r3, [pc, #240]	; (8001b7c <HAL_RTC_GetTime+0x1a8>)
 8001a8a:	fba3 2301 	umull	r2, r3, r3, r1
 8001a8e:	091a      	lsrs	r2, r3, #4
 8001a90:	4613      	mov	r3, r2
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	4413      	add	r3, r2
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	1aca      	subs	r2, r1, r3
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f000 fa42 	bl	8001f2a <RTC_ReadAlarmCounter>
 8001aa6:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001aae:	d008      	beq.n	8001ac2 <HAL_RTC_GetTime+0xee>
 8001ab0:	69fa      	ldr	r2, [r7, #28]
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d904      	bls.n	8001ac2 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8001ab8:	69fa      	ldr	r2, [r7, #28]
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	61fb      	str	r3, [r7, #28]
 8001ac0:	e002      	b.n	8001ac8 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8001ac2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ac6:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	4a2d      	ldr	r2, [pc, #180]	; (8001b80 <HAL_RTC_GetTime+0x1ac>)
 8001acc:	fb02 f303 	mul.w	r3, r2, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001ad6:	69b9      	ldr	r1, [r7, #24]
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f000 f9ff 	bl	8001edc <RTC_WriteTimeCounter>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e041      	b.n	8001b6c <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001aee:	d00c      	beq.n	8001b0a <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8001af0:	69fa      	ldr	r2, [r7, #28]
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	4413      	add	r3, r2
 8001af6:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001af8:	69f9      	ldr	r1, [r7, #28]
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f000 fa2e 	bl	8001f5c <RTC_WriteAlarmCounter>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d00a      	beq.n	8001b1c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e030      	b.n	8001b6c <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001b0a:	69f9      	ldr	r1, [r7, #28]
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f000 fa25 	bl	8001f5c <RTC_WriteAlarmCounter>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e027      	b.n	8001b6c <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8001b1c:	6979      	ldr	r1, [r7, #20]
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f000 facd 	bl	80020be <RTC_DateUpdate>
 8001b24:	e003      	b.n	8001b2e <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d01a      	beq.n	8001b6a <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f000 fa86 	bl	800204a <RTC_ByteToBcd2>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	461a      	mov	r2, r3
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	785b      	ldrb	r3, [r3, #1]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 fa7d 	bl	800204a <RTC_ByteToBcd2>
 8001b50:	4603      	mov	r3, r0
 8001b52:	461a      	mov	r2, r3
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	789b      	ldrb	r3, [r3, #2]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f000 fa74 	bl	800204a <RTC_ByteToBcd2>
 8001b62:	4603      	mov	r3, r0
 8001b64:	461a      	mov	r2, r3
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3720      	adds	r7, #32
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	91a2b3c5 	.word	0x91a2b3c5
 8001b78:	88888889 	.word	0x88888889
 8001b7c:	aaaaaaab 	.word	0xaaaaaaab
 8001b80:	00015180 	.word	0x00015180

08001b84 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b088      	sub	sp, #32
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8001b90:	2300      	movs	r3, #0
 8001b92:	61fb      	str	r3, [r7, #28]
 8001b94:	2300      	movs	r3, #0
 8001b96:	61bb      	str	r3, [r7, #24]
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d002      	beq.n	8001ba8 <HAL_RTC_SetDate+0x24>
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e097      	b.n	8001cdc <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	7c1b      	ldrb	r3, [r3, #16]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d101      	bne.n	8001bb8 <HAL_RTC_SetDate+0x34>
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	e091      	b.n	8001cdc <HAL_RTC_SetDate+0x158>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10c      	bne.n	8001be4 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	78da      	ldrb	r2, [r3, #3]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	785a      	ldrb	r2, [r3, #1]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	789a      	ldrb	r2, [r3, #2]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	739a      	strb	r2, [r3, #14]
 8001be2:	e01a      	b.n	8001c1a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	78db      	ldrb	r3, [r3, #3]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f000 fa4b 	bl	8002084 <RTC_Bcd2ToByte>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	785b      	ldrb	r3, [r3, #1]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 fa42 	bl	8002084 <RTC_Bcd2ToByte>
 8001c00:	4603      	mov	r3, r0
 8001c02:	461a      	mov	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	789b      	ldrb	r3, [r3, #2]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f000 fa39 	bl	8002084 <RTC_Bcd2ToByte>
 8001c12:	4603      	mov	r3, r0
 8001c14:	461a      	mov	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	7bdb      	ldrb	r3, [r3, #15]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	7b59      	ldrb	r1, [r3, #13]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	7b9b      	ldrb	r3, [r3, #14]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	f000 fb23 	bl	8002274 <RTC_WeekDayNum>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	461a      	mov	r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	7b1a      	ldrb	r2, [r3, #12]
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f000 f91c 	bl	8001e7c <RTC_ReadTimeCounter>
 8001c44:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	4a26      	ldr	r2, [pc, #152]	; (8001ce4 <HAL_RTC_SetDate+0x160>)
 8001c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4e:	0adb      	lsrs	r3, r3, #11
 8001c50:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	2b18      	cmp	r3, #24
 8001c56:	d93a      	bls.n	8001cce <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	4a23      	ldr	r2, [pc, #140]	; (8001ce8 <HAL_RTC_SetDate+0x164>)
 8001c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c60:	091b      	lsrs	r3, r3, #4
 8001c62:	4a22      	ldr	r2, [pc, #136]	; (8001cec <HAL_RTC_SetDate+0x168>)
 8001c64:	fb02 f303 	mul.w	r3, r2, r3
 8001c68:	69fa      	ldr	r2, [r7, #28]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001c6e:	69f9      	ldr	r1, [r7, #28]
 8001c70:	68f8      	ldr	r0, [r7, #12]
 8001c72:	f000 f933 	bl	8001edc <RTC_WriteTimeCounter>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d007      	beq.n	8001c8c <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2204      	movs	r2, #4
 8001c80:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e027      	b.n	8001cdc <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001c8c:	68f8      	ldr	r0, [r7, #12]
 8001c8e:	f000 f94c 	bl	8001f2a <RTC_ReadAlarmCounter>
 8001c92:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c9a:	d018      	beq.n	8001cce <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d214      	bcs.n	8001cce <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001caa:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001cae:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001cb0:	69b9      	ldr	r1, [r7, #24]
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f000 f952 	bl	8001f5c <RTC_WriteAlarmCounter>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d007      	beq.n	8001cce <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2204      	movs	r2, #4
 8001cc2:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e006      	b.n	8001cdc <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3720      	adds	r7, #32
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	91a2b3c5 	.word	0x91a2b3c5
 8001ce8:	aaaaaaab 	.word	0xaaaaaaab
 8001cec:	00015180 	.word	0x00015180

08001cf0 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8001cf0:	b590      	push	{r4, r7, lr}
 8001cf2:	b089      	sub	sp, #36	; 0x24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	2100      	movs	r1, #0
 8001d06:	460a      	mov	r2, r1
 8001d08:	801a      	strh	r2, [r3, #0]
 8001d0a:	460a      	mov	r2, r1
 8001d0c:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d002      	beq.n	8001d1a <HAL_RTC_SetAlarm+0x2a>
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_RTC_SetAlarm+0x2e>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e07d      	b.n	8001e1a <HAL_RTC_SetAlarm+0x12a>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	7c1b      	ldrb	r3, [r3, #16]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d101      	bne.n	8001d2a <HAL_RTC_SetAlarm+0x3a>
 8001d26:	2302      	movs	r3, #2
 8001d28:	e077      	b.n	8001e1a <HAL_RTC_SetAlarm+0x12a>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2202      	movs	r2, #2
 8001d34:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8001d36:	f107 0314 	add.w	r3, r7, #20
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f7ff fe48 	bl	80019d4 <HAL_RTC_GetTime>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <HAL_RTC_SetAlarm+0x5e>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e065      	b.n	8001e1a <HAL_RTC_SetAlarm+0x12a>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8001d4e:	7d3b      	ldrb	r3, [r7, #20]
 8001d50:	461a      	mov	r2, r3
 8001d52:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001d56:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8001d5a:	7d7b      	ldrb	r3, [r7, #21]
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	460b      	mov	r3, r1
 8001d60:	011b      	lsls	r3, r3, #4
 8001d62:	1a5b      	subs	r3, r3, r1
 8001d64:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8001d66:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8001d68:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8001d6a:	4413      	add	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d113      	bne.n	8001d9c <HAL_RTC_SetAlarm+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001d7e:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	785b      	ldrb	r3, [r3, #1]
 8001d86:	4619      	mov	r1, r3
 8001d88:	460b      	mov	r3, r1
 8001d8a:	011b      	lsls	r3, r3, #4
 8001d8c:	1a5b      	subs	r3, r3, r1
 8001d8e:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8001d90:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8001d96:	4413      	add	r3, r2
 8001d98:	61fb      	str	r3, [r7, #28]
 8001d9a:	e01e      	b.n	8001dda <HAL_RTC_SetAlarm+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f000 f96f 	bl	8002084 <RTC_Bcd2ToByte>
 8001da6:	4603      	mov	r3, r0
 8001da8:	461a      	mov	r2, r3
 8001daa:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001dae:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	785b      	ldrb	r3, [r3, #1]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f000 f964 	bl	8002084 <RTC_Bcd2ToByte>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	011b      	lsls	r3, r3, #4
 8001dc4:	1a9b      	subs	r3, r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8001dc8:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	789b      	ldrb	r3, [r3, #2]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 f958 	bl	8002084 <RTC_Bcd2ToByte>
 8001dd4:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8001dd6:	4423      	add	r3, r4
 8001dd8:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8001dda:	69fa      	ldr	r2, [r7, #28]
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d205      	bcs.n	8001dee <HAL_RTC_SetAlarm+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001de8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001dec:	61fb      	str	r3, [r7, #28]
  }

  /* Write Alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001dee:	69f9      	ldr	r1, [r7, #28]
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f000 f8b3 	bl	8001f5c <RTC_WriteAlarmCounter>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d007      	beq.n	8001e0c <HAL_RTC_SetAlarm+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2204      	movs	r2, #4
 8001e00:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e006      	b.n	8001e1a <HAL_RTC_SetAlarm+0x12a>
  }
  else
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2200      	movs	r2, #0
 8001e16:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8001e18:	2300      	movs	r3, #0
  }
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3724      	adds	r7, #36	; 0x24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd90      	pop	{r4, r7, pc}

08001e22 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b084      	sub	sp, #16
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e01d      	b.n	8001e74 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 0208 	bic.w	r2, r2, #8
 8001e46:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8001e48:	f7fe fbd2 	bl	80005f0 <HAL_GetTick>
 8001e4c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001e4e:	e009      	b.n	8001e64 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001e50:	f7fe fbce 	bl	80005f0 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e5e:	d901      	bls.n	8001e64 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e007      	b.n	8001e74 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d0ee      	beq.n	8001e50 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b087      	sub	sp, #28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8001e84:	2300      	movs	r3, #0
 8001e86:	827b      	strh	r3, [r7, #18]
 8001e88:	2300      	movs	r3, #0
 8001e8a:	823b      	strh	r3, [r7, #16]
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8001eac:	8a7a      	ldrh	r2, [r7, #18]
 8001eae:	8a3b      	ldrh	r3, [r7, #16]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d008      	beq.n	8001ec6 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8001eb4:	8a3b      	ldrh	r3, [r7, #16]
 8001eb6:	041a      	lsls	r2, r3, #16
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	617b      	str	r3, [r7, #20]
 8001ec4:	e004      	b.n	8001ed0 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8001ec6:	8a7b      	ldrh	r3, [r7, #18]
 8001ec8:	041a      	lsls	r2, r3, #16
 8001eca:	89fb      	ldrh	r3, [r7, #14]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8001ed0:	697b      	ldr	r3, [r7, #20]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	371c      	adds	r7, #28
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr

08001edc <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f85d 	bl	8001faa <RTC_EnterInitMode>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d002      	beq.n	8001efc <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	73fb      	strb	r3, [r7, #15]
 8001efa:	e011      	b.n	8001f20 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	0c12      	lsrs	r2, r2, #16
 8001f04:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	b292      	uxth	r2, r2
 8001f0e:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 f872 	bl	8001ffa <RTC_ExitInitMode>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b085      	sub	sp, #20
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	81fb      	strh	r3, [r7, #14]
 8001f36:	2300      	movs	r3, #0
 8001f38:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f48:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8001f4a:	89fb      	ldrh	r3, [r7, #14]
 8001f4c:	041a      	lsls	r2, r3, #16
 8001f4e:	89bb      	ldrh	r3, [r7, #12]
 8001f50:	4313      	orrs	r3, r2
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr

08001f5c <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f81d 	bl	8001faa <RTC_EnterInitMode>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d002      	beq.n	8001f7c <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	73fb      	strb	r3, [r7, #15]
 8001f7a:	e011      	b.n	8001fa0 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	0c12      	lsrs	r2, r2, #16
 8001f84:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	b292      	uxth	r2, r2
 8001f8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f832 	bl	8001ffa <RTC_ExitInitMode>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b084      	sub	sp, #16
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8001fb6:	f7fe fb1b 	bl	80005f0 <HAL_GetTick>
 8001fba:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001fbc:	e009      	b.n	8001fd2 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001fbe:	f7fe fb17 	bl	80005f0 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fcc:	d901      	bls.n	8001fd2 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e00f      	b.n	8001ff2 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 0320 	and.w	r3, r3, #32
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0ee      	beq.n	8001fbe <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f042 0210 	orr.w	r2, r2, #16
 8001fee:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b084      	sub	sp, #16
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002002:	2300      	movs	r3, #0
 8002004:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0210 	bic.w	r2, r2, #16
 8002014:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002016:	f7fe faeb 	bl	80005f0 <HAL_GetTick>
 800201a:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800201c:	e009      	b.n	8002032 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800201e:	f7fe fae7 	bl	80005f0 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800202c:	d901      	bls.n	8002032 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e007      	b.n	8002042 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 0320 	and.w	r3, r3, #32
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0ee      	beq.n	800201e <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800204a:	b480      	push	{r7}
 800204c:	b085      	sub	sp, #20
 800204e:	af00      	add	r7, sp, #0
 8002050:	4603      	mov	r3, r0
 8002052:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002054:	2300      	movs	r3, #0
 8002056:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8002058:	e005      	b.n	8002066 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	3301      	adds	r3, #1
 800205e:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	3b0a      	subs	r3, #10
 8002064:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	2b09      	cmp	r3, #9
 800206a:	d8f6      	bhi.n	800205a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	b2db      	uxtb	r3, r3
 8002070:	011b      	lsls	r3, r3, #4
 8002072:	b2da      	uxtb	r2, r3
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	4313      	orrs	r3, r2
 8002078:	b2db      	uxtb	r3, r3
}
 800207a:	4618      	mov	r0, r3
 800207c:	3714      	adds	r7, #20
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr

08002084 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	091b      	lsrs	r3, r3, #4
 8002096:	b2db      	uxtb	r3, r3
 8002098:	461a      	mov	r2, r3
 800209a:	4613      	mov	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	4413      	add	r3, r2
 80020b2:	b2db      	uxtb	r3, r3
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bc80      	pop	{r7}
 80020bc:	4770      	bx	lr

080020be <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b086      	sub	sp, #24
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
 80020c6:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]
 80020cc:	2300      	movs	r3, #0
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	2300      	movs	r3, #0
 80020d2:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	7bdb      	ldrb	r3, [r3, #15]
 80020dc:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	7b5b      	ldrb	r3, [r3, #13]
 80020e2:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	7b9b      	ldrb	r3, [r3, #14]
 80020e8:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80020ea:	2300      	movs	r3, #0
 80020ec:	60bb      	str	r3, [r7, #8]
 80020ee:	e06f      	b.n	80021d0 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d011      	beq.n	800211a <RTC_DateUpdate+0x5c>
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	d00e      	beq.n	800211a <RTC_DateUpdate+0x5c>
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	2b05      	cmp	r3, #5
 8002100:	d00b      	beq.n	800211a <RTC_DateUpdate+0x5c>
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	2b07      	cmp	r3, #7
 8002106:	d008      	beq.n	800211a <RTC_DateUpdate+0x5c>
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	2b08      	cmp	r3, #8
 800210c:	d005      	beq.n	800211a <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	2b0a      	cmp	r3, #10
 8002112:	d002      	beq.n	800211a <RTC_DateUpdate+0x5c>
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	2b0c      	cmp	r3, #12
 8002118:	d117      	bne.n	800214a <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2b1e      	cmp	r3, #30
 800211e:	d803      	bhi.n	8002128 <RTC_DateUpdate+0x6a>
      {
        day++;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	3301      	adds	r3, #1
 8002124:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002126:	e050      	b.n	80021ca <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	2b0c      	cmp	r3, #12
 800212c:	d005      	beq.n	800213a <RTC_DateUpdate+0x7c>
        {
          month++;
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	3301      	adds	r3, #1
 8002132:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002134:	2301      	movs	r3, #1
 8002136:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002138:	e047      	b.n	80021ca <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800213a:	2301      	movs	r3, #1
 800213c:	613b      	str	r3, [r7, #16]
          day = 1U;
 800213e:	2301      	movs	r3, #1
 8002140:	60fb      	str	r3, [r7, #12]
          year++;
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	3301      	adds	r3, #1
 8002146:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8002148:	e03f      	b.n	80021ca <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	2b04      	cmp	r3, #4
 800214e:	d008      	beq.n	8002162 <RTC_DateUpdate+0xa4>
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	2b06      	cmp	r3, #6
 8002154:	d005      	beq.n	8002162 <RTC_DateUpdate+0xa4>
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	2b09      	cmp	r3, #9
 800215a:	d002      	beq.n	8002162 <RTC_DateUpdate+0xa4>
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	2b0b      	cmp	r3, #11
 8002160:	d10c      	bne.n	800217c <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2b1d      	cmp	r3, #29
 8002166:	d803      	bhi.n	8002170 <RTC_DateUpdate+0xb2>
      {
        day++;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	3301      	adds	r3, #1
 800216c:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800216e:	e02c      	b.n	80021ca <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	3301      	adds	r3, #1
 8002174:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002176:	2301      	movs	r3, #1
 8002178:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800217a:	e026      	b.n	80021ca <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	2b02      	cmp	r3, #2
 8002180:	d123      	bne.n	80021ca <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2b1b      	cmp	r3, #27
 8002186:	d803      	bhi.n	8002190 <RTC_DateUpdate+0xd2>
      {
        day++;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	3301      	adds	r3, #1
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	e01c      	b.n	80021ca <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2b1c      	cmp	r3, #28
 8002194:	d111      	bne.n	80021ba <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	b29b      	uxth	r3, r3
 800219a:	4618      	mov	r0, r3
 800219c:	f000 f838 	bl	8002210 <RTC_IsLeapYear>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <RTC_DateUpdate+0xf0>
        {
          day++;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	3301      	adds	r3, #1
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	e00d      	b.n	80021ca <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	3301      	adds	r3, #1
 80021b2:	613b      	str	r3, [r7, #16]
          day = 1U;
 80021b4:	2301      	movs	r3, #1
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	e007      	b.n	80021ca <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2b1d      	cmp	r3, #29
 80021be:	d104      	bne.n	80021ca <RTC_DateUpdate+0x10c>
      {
        month++;
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	3301      	adds	r3, #1
 80021c4:	613b      	str	r3, [r7, #16]
        day = 1U;
 80021c6:	2301      	movs	r3, #1
 80021c8:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	3301      	adds	r3, #1
 80021ce:	60bb      	str	r3, [r7, #8]
 80021d0:	68ba      	ldr	r2, [r7, #8]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d38b      	bcc.n	80020f0 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	4619      	mov	r1, r3
 80021fa:	6978      	ldr	r0, [r7, #20]
 80021fc:	f000 f83a 	bl	8002274 <RTC_WeekDayNum>
 8002200:	4603      	mov	r3, r0
 8002202:	461a      	mov	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	731a      	strb	r2, [r3, #12]
}
 8002208:	bf00      	nop
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800221a:	88fb      	ldrh	r3, [r7, #6]
 800221c:	f003 0303 	and.w	r3, r3, #3
 8002220:	b29b      	uxth	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8002226:	2300      	movs	r3, #0
 8002228:	e01d      	b.n	8002266 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800222a:	88fb      	ldrh	r3, [r7, #6]
 800222c:	4a10      	ldr	r2, [pc, #64]	; (8002270 <RTC_IsLeapYear+0x60>)
 800222e:	fba2 1203 	umull	r1, r2, r2, r3
 8002232:	0952      	lsrs	r2, r2, #5
 8002234:	2164      	movs	r1, #100	; 0x64
 8002236:	fb01 f202 	mul.w	r2, r1, r2
 800223a:	1a9b      	subs	r3, r3, r2
 800223c:	b29b      	uxth	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8002242:	2301      	movs	r3, #1
 8002244:	e00f      	b.n	8002266 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8002246:	88fb      	ldrh	r3, [r7, #6]
 8002248:	4a09      	ldr	r2, [pc, #36]	; (8002270 <RTC_IsLeapYear+0x60>)
 800224a:	fba2 1203 	umull	r1, r2, r2, r3
 800224e:	09d2      	lsrs	r2, r2, #7
 8002250:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002254:	fb01 f202 	mul.w	r2, r1, r2
 8002258:	1a9b      	subs	r3, r3, r2
 800225a:	b29b      	uxth	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8002260:	2301      	movs	r3, #1
 8002262:	e000      	b.n	8002266 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8002264:	2300      	movs	r3, #0
  }
}
 8002266:	4618      	mov	r0, r3
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr
 8002270:	51eb851f 	.word	0x51eb851f

08002274 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	70fb      	strb	r3, [r7, #3]
 8002280:	4613      	mov	r3, r2
 8002282:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8002284:	2300      	movs	r3, #0
 8002286:	60bb      	str	r3, [r7, #8]
 8002288:	2300      	movs	r3, #0
 800228a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002292:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	2b02      	cmp	r3, #2
 8002298:	d82d      	bhi.n	80022f6 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800229a:	78fa      	ldrb	r2, [r7, #3]
 800229c:	4613      	mov	r3, r2
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	4413      	add	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	1a9b      	subs	r3, r3, r2
 80022a6:	4a2c      	ldr	r2, [pc, #176]	; (8002358 <RTC_WeekDayNum+0xe4>)
 80022a8:	fba2 2303 	umull	r2, r3, r2, r3
 80022ac:	085a      	lsrs	r2, r3, #1
 80022ae:	78bb      	ldrb	r3, [r7, #2]
 80022b0:	441a      	add	r2, r3
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	441a      	add	r2, r3
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	3b01      	subs	r3, #1
 80022ba:	089b      	lsrs	r3, r3, #2
 80022bc:	441a      	add	r2, r3
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	3b01      	subs	r3, #1
 80022c2:	4926      	ldr	r1, [pc, #152]	; (800235c <RTC_WeekDayNum+0xe8>)
 80022c4:	fba1 1303 	umull	r1, r3, r1, r3
 80022c8:	095b      	lsrs	r3, r3, #5
 80022ca:	1ad2      	subs	r2, r2, r3
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	4922      	ldr	r1, [pc, #136]	; (800235c <RTC_WeekDayNum+0xe8>)
 80022d2:	fba1 1303 	umull	r1, r3, r1, r3
 80022d6:	09db      	lsrs	r3, r3, #7
 80022d8:	4413      	add	r3, r2
 80022da:	1d1a      	adds	r2, r3, #4
 80022dc:	4b20      	ldr	r3, [pc, #128]	; (8002360 <RTC_WeekDayNum+0xec>)
 80022de:	fba3 1302 	umull	r1, r3, r3, r2
 80022e2:	1ad1      	subs	r1, r2, r3
 80022e4:	0849      	lsrs	r1, r1, #1
 80022e6:	440b      	add	r3, r1
 80022e8:	0899      	lsrs	r1, r3, #2
 80022ea:	460b      	mov	r3, r1
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	1a5b      	subs	r3, r3, r1
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	e029      	b.n	800234a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80022f6:	78fa      	ldrb	r2, [r7, #3]
 80022f8:	4613      	mov	r3, r2
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	4413      	add	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	1a9b      	subs	r3, r3, r2
 8002302:	4a15      	ldr	r2, [pc, #84]	; (8002358 <RTC_WeekDayNum+0xe4>)
 8002304:	fba2 2303 	umull	r2, r3, r2, r3
 8002308:	085a      	lsrs	r2, r3, #1
 800230a:	78bb      	ldrb	r3, [r7, #2]
 800230c:	441a      	add	r2, r3
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	441a      	add	r2, r3
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	089b      	lsrs	r3, r3, #2
 8002316:	441a      	add	r2, r3
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	4910      	ldr	r1, [pc, #64]	; (800235c <RTC_WeekDayNum+0xe8>)
 800231c:	fba1 1303 	umull	r1, r3, r1, r3
 8002320:	095b      	lsrs	r3, r3, #5
 8002322:	1ad2      	subs	r2, r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	490d      	ldr	r1, [pc, #52]	; (800235c <RTC_WeekDayNum+0xe8>)
 8002328:	fba1 1303 	umull	r1, r3, r1, r3
 800232c:	09db      	lsrs	r3, r3, #7
 800232e:	4413      	add	r3, r2
 8002330:	1c9a      	adds	r2, r3, #2
 8002332:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <RTC_WeekDayNum+0xec>)
 8002334:	fba3 1302 	umull	r1, r3, r3, r2
 8002338:	1ad1      	subs	r1, r2, r3
 800233a:	0849      	lsrs	r1, r1, #1
 800233c:	440b      	add	r3, r1
 800233e:	0899      	lsrs	r1, r3, #2
 8002340:	460b      	mov	r3, r1
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	1a5b      	subs	r3, r3, r1
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	b2db      	uxtb	r3, r3
}
 800234e:	4618      	mov	r0, r3
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr
 8002358:	38e38e39 	.word	0x38e38e39
 800235c:	51eb851f 	.word	0x51eb851f
 8002360:	24924925 	.word	0x24924925

08002364 <__libc_init_array>:
 8002364:	b570      	push	{r4, r5, r6, lr}
 8002366:	2600      	movs	r6, #0
 8002368:	4d0c      	ldr	r5, [pc, #48]	; (800239c <__libc_init_array+0x38>)
 800236a:	4c0d      	ldr	r4, [pc, #52]	; (80023a0 <__libc_init_array+0x3c>)
 800236c:	1b64      	subs	r4, r4, r5
 800236e:	10a4      	asrs	r4, r4, #2
 8002370:	42a6      	cmp	r6, r4
 8002372:	d109      	bne.n	8002388 <__libc_init_array+0x24>
 8002374:	f000 f822 	bl	80023bc <_init>
 8002378:	2600      	movs	r6, #0
 800237a:	4d0a      	ldr	r5, [pc, #40]	; (80023a4 <__libc_init_array+0x40>)
 800237c:	4c0a      	ldr	r4, [pc, #40]	; (80023a8 <__libc_init_array+0x44>)
 800237e:	1b64      	subs	r4, r4, r5
 8002380:	10a4      	asrs	r4, r4, #2
 8002382:	42a6      	cmp	r6, r4
 8002384:	d105      	bne.n	8002392 <__libc_init_array+0x2e>
 8002386:	bd70      	pop	{r4, r5, r6, pc}
 8002388:	f855 3b04 	ldr.w	r3, [r5], #4
 800238c:	4798      	blx	r3
 800238e:	3601      	adds	r6, #1
 8002390:	e7ee      	b.n	8002370 <__libc_init_array+0xc>
 8002392:	f855 3b04 	ldr.w	r3, [r5], #4
 8002396:	4798      	blx	r3
 8002398:	3601      	adds	r6, #1
 800239a:	e7f2      	b.n	8002382 <__libc_init_array+0x1e>
 800239c:	0800240c 	.word	0x0800240c
 80023a0:	0800240c 	.word	0x0800240c
 80023a4:	0800240c 	.word	0x0800240c
 80023a8:	08002410 	.word	0x08002410

080023ac <memset>:
 80023ac:	4603      	mov	r3, r0
 80023ae:	4402      	add	r2, r0
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d100      	bne.n	80023b6 <memset+0xa>
 80023b4:	4770      	bx	lr
 80023b6:	f803 1b01 	strb.w	r1, [r3], #1
 80023ba:	e7f9      	b.n	80023b0 <memset+0x4>

080023bc <_init>:
 80023bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023be:	bf00      	nop
 80023c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023c2:	bc08      	pop	{r3}
 80023c4:	469e      	mov	lr, r3
 80023c6:	4770      	bx	lr

080023c8 <_fini>:
 80023c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ca:	bf00      	nop
 80023cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ce:	bc08      	pop	{r3}
 80023d0:	469e      	mov	lr, r3
 80023d2:	4770      	bx	lr
